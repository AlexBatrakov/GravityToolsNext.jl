var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#GravityToolsNext.AbstractGridRule","page":"API","title":"GravityToolsNext.AbstractGridRule","text":"AbstractGridRule\n\nA discretization rule for a 1D grid axis. Implementations:\n\nLinRule — uniform spacing in the physical domain.\nLogRule — uniform spacing in log10(|x|); sign can be auto-detected.\nExplicitRule — use a user-provided set of values verbatim.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.AbstractTempoSettings","page":"API","title":"GravityToolsNext.AbstractTempoSettings","text":"AbstractTempoSettings\n\nAbstract base type for all TEMPO settings structures. Used for dispatching and type hierarchies.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.AbstractTempoVersion","page":"API","title":"GravityToolsNext.AbstractTempoVersion","text":"AbstractTempoVersion\n\nAbstract base for different TEMPO flavors (Tempo / Tempo2). Implementations must provide:\n\ntempo_data_dir(v) :: String    — data directory path (TEMPO* env target)\ntempo_cmd_path(v) :: String    — resolved executable path (or bare name)\ntempo_cmd(v)      :: Cmd       — ready-to-run command\ntempo_env(v)      :: Dict{String,String} — env vars to pass to the process\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.AdaptiveRefinement2DGrid","page":"API","title":"GravityToolsNext.AdaptiveRefinement2DGrid","text":"AdaptiveRefinement2DGrid\n\nStructure representing a 2D adaptive refinement grid with variables, parameters, axes, refinement settings, and refinement status.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.AdaptiveRefinement2DGrid-Union{Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{GridAxis{T1}, GridAxis{T2}, T3}} where {T1<:AbstractGridRule, T2<:AbstractGridRule, T3}","page":"API","title":"GravityToolsNext.AdaptiveRefinement2DGrid","text":"AdaptiveRefinement2DGrid(x::GridAxis, y::GridAxis, ref_sets)\n\nConstruct a new AdaptiveRefinement2DGrid from grid axes and refinement settings.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.BasicResidualStats","page":"API","title":"GravityToolsNext.BasicResidualStats","text":"BasicResidualStats\n\nSummary for raw (non-normalized) residuals.\n\nFields\n\nn       : number of points\nmin,max : range\nmean    : arithmetic mean\nwmean   : weighted mean (if weights given; else = mean)\nmedian  : sample median\nrms     : √(mean(x^2))             — uncentered\nwrms    : √(∑w x^2 / ∑w)           — uncentered, weighted\nstd     : √(mean((x-mean)^2))      — centered\nwstd    : √(∑w (x-wmean)^2 / ∑w)   — centered, weighted\nmad     : median(|x - median(x)|)  — robust spread\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.BasicTempoOutput","page":"API","title":"GravityToolsNext.BasicTempoOutput","text":"BasicTempoOutput\n\nBasic statistical metrics from a single TEMPO2 fit iteration.\n\nFields:\n\nrms_pre_fit_residual_us::Float64     : RMS of pre-fit residuals (µs)\nrms_post_fit_residual_us::Float64    : RMS of post-fit residuals (µs)\nrms_tn_post_fit_residual_us::Float64 : RMS of post-fit residuals after TN plugin (µs), if present (NaN otherwise)\nchisqr::Float64                      : Total chi-square\nnfree::Int                           : Degrees of freedom\nchisqr_red::Float64                  : Reduced chi-square (chisqr / nfree)\npre_post::Float64                    : pre-fit RMS / post-fit RMS\nnumber_of_fit_parameters::Int        : Number of fitted parameters\nnumber_of_points_in_fit::Int         : Number of TOAs in fit\noffset_value::Float64                : Best-fit offset value\noffset_error::Float64                : Uncertainty of the offset\noffset_e_sqrt_n::Float64             : offset_error * sqrt(n)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.BasicTempoTask","page":"API","title":"GravityToolsNext.BasicTempoTask","text":"BasicTempoTask(settings::TempoRunSettings)\n\nSingle TEMPO/TEMPO2 task with parsed iterations, optional residual statistics, and optional white-noise analysis controlled by settings.analysis.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.CaptureOptions","page":"API","title":"GravityToolsNext.CaptureOptions","text":"CaptureOptions\n\nControls what is captured/emitted by the TEMPO engine itself (flags / process I/O).\n\nFields\n\nwrite_output::Bool    : capture stdout/stderr from the engine\nwrite_residuals::Bool : for Tempo2 uses -write_residuals (per internal iteration);                           for Tempo uses -residuals (final only)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.ClenshawCurtisNodes","page":"API","title":"GravityToolsNext.ClenshawCurtisNodes","text":"ClenshawCurtisNodes(n; eps=1e-6)\n\nChebyshev–Clenshaw–Curtis nodes on u ∈ (0,1) with optional trimming eps to avoid exact endpoints {0,1}. These u-nodes are later mapped to parameter values via prior_invcdf(prior, u).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.CombinedTOAEntry","page":"API","title":"GravityToolsNext.CombinedTOAEntry","text":"CombinedTOAEntry\n\nMerged view of one TOA with corresponding residual entries.\n\nFields:\n\nindex::Int               : sequential index after header removal (from .tim)\ntimfile_line::Int        : original line number in the .tim file\nin_fit::Bool             : whether this TOA is within the requested time window\ntoa::Float64             : MJD\nfreq::Float64            : frequency (MHz)\nsignal::Float64          : residuals signal column (µs)\nred_noise::Float64       : residual - residual_tn (µs)\nresidual::Float64        : residual with red noise (µs)\nresidual_tn::Float64     : residual with TN removed (µs)\nuncertainty_orig::Float64: original TOA uncertainty from .tim (µs)\nuncertainty::Float64     : transformed uncertainty from residuals file (µs)\nbackend::String          : backend label\nweight::Float64          : 1 / uncertainty^2 (or 0 if uncertainty ≤ 0 or non-finite)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.ContourUnit","page":"API","title":"GravityToolsNext.ContourUnit","text":"ContourUnit(name; min=-Inf, max=Inf, contours, from_min=true)\n\nRefine near specified contour levels (contours) of the target metric within [min, max]. contours can be a number, a tuple, or a vector of levels.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.ConvergenceInfo","page":"API","title":"GravityToolsNext.ConvergenceInfo","text":"ConvergenceInfo\n\nSummary of convergence diagnostics.\n\nwrms, wrms_tn, chisqr — time series with last-step deltas.\npre_post_final — value taken strictly from the last iteration (NaN if unavailable).\nworst_parameter — WorstParam from the last successful iteration providing a fit-parameter table; nothing otherwise.\nthresholds — dictionary of limits used by is_converged.\nconverged — final decision under the given thresholds.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.ConvergenceInfo-Tuple{GravityToolsNext.ConvergenceSeries, GravityToolsNext.ConvergenceSeries, GravityToolsNext.ConvergenceSeries, Float64, Union{Nothing, @NamedTuple{name::Symbol, delta::Float64, uncertainty::Float64, ratio::Float64}}, Dict{Symbol, Float64}}","page":"API","title":"GravityToolsNext.ConvergenceInfo","text":"ConvergenceInfo(wrms, wrms_tn, chisqr, pre_post_final, worst_parameter, thresholds)\n\nBuilds a ConvergenceInfo and computes converged. For sequences with fewer than two points, convergence falls back to the :pre_post_final criterion.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.ConvergenceSeries","page":"API","title":"GravityToolsNext.ConvergenceSeries","text":"ConvergenceSeries\n\nHolds a metric's values across iterations together with absolute/relative last-step deltas. If fewer than two points are available, final_*_delta = NaN.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.DiffContourUnit","page":"API","title":"GravityToolsNext.DiffContourUnit","text":"DiffContourUnit(name; min=-Inf, max=Inf, diffs, contours, from_min=true)\n\nRefine near combinations of absolute difference thresholds (diffs) and contour levels (contours) within [min, max]. diffs/contours accept a number, tuple, or vector.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.DiffUnit","page":"API","title":"GravityToolsNext.DiffUnit","text":"DiffUnit(name; min=-Inf, max=Inf, diff, from_min=true)\n\nRefine where the absolute change Δ(metric) exceeds diff within [min, max]. If from_min is true, scanning proceeds from the lower bound.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.EngineOptions","page":"API","title":"GravityToolsNext.EngineOptions","text":"EngineOptions\n\nDefines low-level options for a TEMPO run.\n\nFields\n\ntempo_version::AbstractTempoVersion : Which TEMPO flavor to use\nflags::String                       : Additional command-line flags (normalized string)\nnits::Int                           : Number of internal iterations (must be ≥ 1)\ngain::Float64                       : GAIN parameter controlling convergence damping (must be > 0)\n\nNotes\n\nflags should be a single string; it is normalized (trimmed) and must not contain newlines.\ngain is validated to be strictly positive.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.ExplicitRule","page":"API","title":"GravityToolsNext.ExplicitRule","text":"ExplicitRule(vals)\n\nExplicit set of coordinates for the axis. The rule carries the values; the axis keeps min/max/N for convenience.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.ExplicitThetaNodes","page":"API","title":"GravityToolsNext.ExplicitThetaNodes","text":"ExplicitThetaNodes(theta)\n\nExplicit parameter values; used as-is (no inverse-CDF mapping).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.FitParameter","page":"API","title":"GravityToolsNext.FitParameter","text":"FitParameter\n\nRepresents a single model parameter reported in the TEMPO2 fit table.\n\nFields:\n\nname::String         : parameter name (e.g., \"F0\", \"PB\", ...)\nname_symbol::Symbol  : cached symbol for fast lookup\npre_fit::Float64     : pre-fit value\npost_fit::Float64    : post-fit value\nuncertainty::Float64 : 1σ uncertainty\ndifference::Float64  : post_fit - pre_fit\nfit_flag::Bool       : whether the parameter was fitted (true) or held fixed (false)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.FullUnit","page":"API","title":"GravityToolsNext.FullUnit","text":"FullUnit(name; min=-Inf, max=Inf)\n\nAlways refine over the whole range [min, max] of variable name.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.GeneralTempoResult","page":"API","title":"GravityToolsNext.GeneralTempoResult","text":"GeneralTempoResult\n\nTop-level container with everything you usually want after a run.\n\nFields (stored)\n\niterations            : all internal iterations\nfinal_index           : index of the last iteration (== length(iterations))\nlast_successful_index : 0 if there were no successful iterations\nsuccess               : quick boolean flag; true iff the run is considered successful\nstatus                : low-level run status (:ok | :engine_failed | :parse_failed | :files_missing | :unknown)\nconvergence           : convergence summary across iterations\nmetrics               : compact scalar metrics for quick ranking/comparison\nparam_estimates       : map :NAME => (value, uncertainty) extracted from the final iteration\npar_file_final        : written output par-file (if available)\nsubresults            : optional nested results (e.g., per-epoch, per-band, grid cells)\nsubresult_type        : tag describing what subresults mean (e.g., :epoch, :band, :grid)\nmetadata              : extra info (paths, timings, seeds, etc.)\n\nVirtual properties (accessible via res.final / res.last_successful):\n\nfinal                 : alias for res.iterations[res.final_index]\nlast_successful       : nothing if last_successful_index == 0, otherwise                           res.iterations[res.last_successful_index]\nresidual_stats        : alias for res.final.stats\nwhite_noise           : alias for res.final.white_noise_fit (white_noise_fit is also available)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.GridAxis","page":"API","title":"GravityToolsNext.GridAxis","text":"GridAxis(name; min, max, N, rule)\nGridAxis(name, values::AbstractVector)\n\nA typed grid axis with a chosen discretization rule. Call axisvalues to obtain physical coordinates and linspace to obtain the rule's linear parameterization.\n\nArguments\n\nname::Symbol : semantic axis name (e.g. :PBDOT, :beta0).\nmin, max     : axis bounds (ignored for ExplicitRule).\nN::Integer   : number of grid points (must be ≥ 1).\nrule         : one of LinRule(), LogRule([sign]), or ExplicitRule.\nvalues       : alternative constructor; makes an ExplicitRule from a supplied vector of nodes.\n\nExamples\n\nax1 = GridAxis(:x; min=-1.0, max=1.0, N=21, rule=LinRule())\nax2 = GridAxis(:m; min=-1e-4, max=-1e-2, N=16, rule=LogRule())  # auto-sign (−)\nax3 = GridAxis(:θ, [-1.0, -0.5, 0.0, 0.5, 1.0])                 # explicit nodes\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.GridAxis-Tuple{Symbol, AbstractVector{<:Real}}","page":"API","title":"GravityToolsNext.GridAxis","text":"GridAxis(name::Symbol, vals::AbstractVector)\n\nConstruct an explicit axis that uses the provided vals verbatim.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.GridAxis-Tuple{Symbol}","page":"API","title":"GravityToolsNext.GridAxis","text":"GridAxis(name::Symbol; min, max, N, rule::AbstractGridRule=LinRule())\n\nConstruct an axis on [min, max] with N nodes, using the provided rule. Supported rules: LinRule(), LogRule([sign]), or ExplicitRule(vals) (via the positional constructor GridAxis(name, vals)).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.GridPrior","page":"API","title":"GravityToolsNext.GridPrior","text":"GridPrior\n\nTabulated prior on a single parameter.\n\nFields\n\nx   : strictly increasing parameter grid (e.g., θ-values)\npdf : prior density on x (non-negative; integrates to 1 w.r.t. x)\ncdf : cumulative prior on x (strictly increasing, ~[0,1])\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.GridPrior-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"API","title":"GravityToolsNext.GridPrior","text":"GridPrior(x::AbstractVector{<:Real}, pdf::AbstractVector{<:Real})\n\nBuild a normalized GridPrior from tabulated x and (possibly unnormalized) pdf.\n\nSorts by x if needed;\nClamps negative pdf to 0;\nComputes CDF via cumulative trapezoid;\nNormalizes both pdf and cdf to unit mass;\nValidates the result.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.InputModifiers","page":"API","title":"GravityToolsNext.InputModifiers","text":"InputModifiers\n\nDescribes transformations applied to the inputs of a TEMPO run.\n\nFields\n\noverride_params::Vector{TempoParameter} : parameters to upsert into the .par\ntime_start::Union{Nothing,Float64}      : optional lower MJD bound (inclusive)\ntime_finish::Union{Nothing,Float64}     : optional upper MJD bound (inclusive)\ncouple_f1_to_ddot::Bool                 : if true, auto-adjust F1 when DDOT is overridden (applied during materialization)\n\nNotes\n\nIf both time_start and time_finish are provided, time_start ≤ time_finish is enforced.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.InternalIterationOutput","page":"API","title":"GravityToolsNext.InternalIterationOutput","text":"InternalIterationOutput\n\nContainer for one internal fit iteration (or pre-iteration preamble if the first iteration did not actually run but produced logs/errors).\n\nFields:\n\nbasic::Union{BasicTempoOutput,Nothing}          : basic fit metrics, or nothing if unavailable\nfit_parameters::Union{Vector{FitParameter},Nothing} : parameter table, or nothing\nerror::TempoOutputError                         : error status\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.InternalIterationResult","page":"API","title":"GravityToolsNext.InternalIterationResult","text":"InternalIterationResult\n\nA single TEMPO iteration snapshot:\n\nFields\n\noutput          : parsed TEMPO output blocks (incl. basic/error/parameters)\nresiduals       : raw residual rows as read from disk (or nothing if not kept)\nstats           : residual statistics group (in-fit / in-tim), if available\nwhite_noise_fit : per-backend white-noise fit result (optional)\nmetadata        : extra info (paths, counts, flags, time window, etc.)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.LinRule","page":"API","title":"GravityToolsNext.LinRule","text":"LinRule <: AbstractGridRule\n\nLinear spacing rule in the physical coordinate: values(ax) is an evenly spaced LinRange(min, max, N).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.LocalMinimaUnit","page":"API","title":"GravityToolsNext.LocalMinimaUnit","text":"LocalMinimaUnit(name; min=-Inf, max=Inf, from_min=true)\n\nRefine until a local minimum is detected along variable name within the interval [min, max].\n\nArguments\n\nname::Symbol : the variable/axis identifier.\nmin, max   : bounds of the search interval.\nfrom_min     : if true, sweep from the lower bound (otherwise from upper).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.LogRule","page":"API","title":"GravityToolsNext.LogRule","text":"LogRule(sign)\nLogRule()\n\nLogarithmic spacing rule: uniformly spaced in log10(|x|).\n\nArguments\n\nsign::Int : +1 or -1. Controls the sign of returned physical values.               Use LogRule() (no args) to enable auto sign — inferred from               the axis min at sampling time.\n\nNotes\n\nPhysical values are computed as sign * 10 .^ linspace(ax), where linspace(ax) is uniform in log10(|x|).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.LoggingOptions","page":"API","title":"GravityToolsNext.LoggingOptions","text":"LoggingOptions\n\nLightweight logging verbosity controls for the runner.\n\nverbosity — one of :silent | :warn | :info | :debug (also accepts 0..3 in the constructor)\nwith_timestamps — include timestamps in log lines\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.MaterializedJob","page":"API","title":"GravityToolsNext.MaterializedJob","text":"MaterializedJob\n\nConcrete, self-contained description of a single run workspace. It keeps the original TempoRunSettings (never mutated) and records the realized filesystem layout (job_root, input/output/tmp) and resolved paths to staged inputs/outputs. Internal to TempoRun; not exported. Do not construct manually.\n\nFields\n\nsettings       : the original settings used to materialize the job\njob_root       : absolute job root directory\ninput_dir      : directory where input files live for this job\noutput_dir     : directory where final outputs are written\ntmp_dir        : working CWD for the engine (may equal job_root)\nrun_cwd        : actual CWD for the engine process\npar_in_path    : resolved path to the input par file used to create _init.par\ntim_in_path    : resolved path to the staged TIM inside the job\npar_out_path   : absolute path where the final .par is placed\ncreated_paths  : a list of paths created during materialization\nnotes          : assorted flags (e.g., :snapshot_par, :linked_tim)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.PriorExecutionOptions","page":"API","title":"GravityToolsNext.PriorExecutionOptions","text":"PriorExecutionOptions\n\nExecution policy for running prior-marginalization nodes.\n\nFields\n\nmode              : node chaining policy (:independent | :chained)\nchain_direction   : traversal order when chaining (:forward | :backward)\nchain_snapshot_par: force snapshot of per-node input par when chaining (true/false)\nscheduler         : how to schedule nodes (:serial | :distributed)\nmax_workers       : cap for distributed workers (ignored for :serial; 0 means \"all available\")\nworkdir_layout    : directory layout policy (currently only :per_node)\nnode_dir_prefix   : subdirectory prefix under the base task's work dir (e.g. \"nodes/node_\")\nkeep_node_dirs    : keep (true) or delete (false) per-node directories after run\non_error          : error handling (:stop | :skip | :collect)\n\nDirectory naming:\n\ndir_name_mode     : directory name style (:index_only | :with_value)\nindex_pad         : zero-padding width for node index\nvalue_sig         : significant digits used when embedding the parameter value into the name\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.PriorMarginalizationSettings","page":"API","title":"GravityToolsNext.PriorMarginalizationSettings","text":"PriorMarginalizationSettings{P,N}\n\nSettings describing prior-based marginalization over a single parameter.\n\nFields\n\nparameter          : TEMPO parameter name (e.g., :GAMMA, :XPBDOT)\npin_mode           : how to set the parameter per node (:force | :fixed | :fit)\nprior              : prior specification (analytic / grid / sampled)\nnodes              : rule to generate θ-nodes (mapped via prior inverse CDF, if applicable)\nlikelihood_source  : metric key used to build likelihood (a key in result.metrics)\nref_strategy       : reference choice for Δ (e.g., :prior_median | :grid_argmin | :spline_argmin | :custom_value)\nref_value          : custom reference value (required iff ref_strategy == :custom_value)\nrepresentative     : which θ to report at top-level (e.g., :prior_median)\nsave_node_results  : whether to keep subresults (per-node GeneralTempoResult)\nexec_options       : execution policy (chaining, scheduler, dirs, error handling, naming)\nmetrics_hook       : optional callback to extend the metrics dictionary\n\nNotes\n\nmetrics_hook is expected to have signature like: (final_it::InternalIterationResult, conv::ConvergenceInfo, metrics::Dict{Symbol,Float64}) -> Nothing and can mutate metrics in-place to add custom scalars.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.PriorMarginalizedTempoTask","page":"API","title":"GravityToolsNext.PriorMarginalizedTempoTask","text":"PriorMarginalizedTempoTask{T,P,N} <: SingleTempoTask\n\nA task wrapper that evaluates a base single-tempo task over a grid of prior values θ and aggregates node results into one posterior-aware result.\n\nType parameters\n\nT — a concrete SingleTempoTask (e.g. BasicTempoTask)\nP — a prior specification implementing the AbstractPriorSpec API\nN — a node rule implementing the AbstractNodeRule API\n\nFields\n\nbase_task  — the underlying single task to run at each grid node\nsettings   — prior definition, node grid rule, execution options, etc.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.QuantileNodes","page":"API","title":"GravityToolsNext.QuantileNodes","text":"QuantileNodes(q)\n\nExplicit quantiles q ⊂ (0,1); they will be clamped into (ε, 1-ε) and mapped by prior_invcdf.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.RefinementSettings","page":"API","title":"GravityToolsNext.RefinementSettings","text":"RefinementSettings(units...; desired_refinement_level, parallel=false, params_to_save=())\n\nContainer for adaptive‑grid refinement configuration.\n\nArguments\n\nunits...                 : one or more refinement units (order matters).\ndesired_refinement_level : how many refinement rounds to perform (≥ 0).\nparallel                 : whether the grid engine may run points in parallel.\nparams_to_save           : tuple of metric names to extract at each point.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.RelDiffUnit","page":"API","title":"GravityToolsNext.RelDiffUnit","text":"RelDiffUnit(name; min=-Inf, max=Inf, rel_diff, from_min=true)\n\nRefine where the relative change exceeds rel_diff within [min, max].\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.RetentionOptions","page":"API","title":"GravityToolsNext.RetentionOptions","text":"RetentionOptions\n\nControls what data we keep in the in-memory/result structures after a run.\n\nFields\n\nsave_internal_iterations::Bool : retain all intermediate iteration results\nsave_residuals::Bool           : retain residuals arrays inside results (can be large)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.RunArtifacts","page":"API","title":"GravityToolsNext.RunArtifacts","text":"RunArtifacts\n\nFilesystem view of a concrete run. All paths are absolute and can be used by task-level code to read, archive, or prune artifacts. Constructed by run_tempo_parsed.\n\nFields\n\njob_root     : job root directory\nrun_cwd      : actual engine CWD (tmp/ for split layout by default)\ninput_dir    : directory with staged inputs for the run\noutput_dir   : directory where final outputs reside\ntim_path     : the staged TIM used by the run\npar_out_path : final .par path (may or may not exist on failure)\nout_path     : stdout capture file path (when enabled), otherwise nothing\nresidual_paths : per-iteration residual file paths (nothing if absent)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.RunPaths","page":"API","title":"GravityToolsNext.RunPaths","text":"RunPaths\n\nHolds paths for a TEMPO run.\n\nFields\n\nwork_dir::String   : Absolute working directory for the run\npar_input::String  : Input .par file name or relative path (resolved against work_dir; absolute paths are rejected)\npar_output::String : Output .par file name (filename only; no directories)\ntim_input::String  : .tim file name or relative path (resolved against work_dir; absolute paths are rejected)\n\nNotes\n\nA keyword constructor RunPaths(; work_dir, par_input, tim_input, par_output=default_par_output(par_input)) is available.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.SampledPrior-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.SampledPrior","text":"SampledPrior(path::AbstractString;\n             column::Union{Int,Symbol}=1,\n             comment::AbstractString=\"#\",\n             delim=nothing,\n             transform::Function=identity,\n             bandwidth::Union{Nothing,Real}=nothing) -> SampledPrior\n\nConvenience constructor: read numeric samples from path and build a SampledPrior.\n\ncolumn: 1-based column index or :auto (first parseable number per line).\ncomment: lines starting with this string are skipped.\ndelim: custom delimiter for split (default: regex for commas/whitespace).\ntransform: applied to each parsed value (e.g. unit conversion).\nbandwidth: optional KDE bandwidth override used at materialization time.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.TempoOutputError","page":"API","title":"GravityToolsNext.TempoOutputError","text":"TempoOutputError\n\nDescribes an error encountered while parsing one iteration section.\n\nFields:\n\nerror_type::Symbol : :none if no error; otherwise a specific error tag (e.g., :missing_rms, :crash, ...)\nmessage::String    : diagnostic message\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.TempoParFile","page":"API","title":"GravityToolsNext.TempoParFile","text":"TempoParFile\n\nA representation of a TEMPO .par file, containing:\n\nname   : file name (e.g., \"B1937.par\")\ndir    : directory path\npath   : full path (joinpath(dir, name))\nparams : dictionary of parameters (Symbol => TempoParameter)\norder  : ordered list of parameter symbols to preserve file layout\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.TempoParameter","page":"API","title":"GravityToolsNext.TempoParameter","text":"Convenient constructor. Accepts AbstractString for name (e.g. SubString), stores as String. Promotes any Real value/uncertainty to BigFloat.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.TempoParameter-2","page":"API","title":"GravityToolsNext.TempoParameter","text":"TempoParameter\n\nParameter from a TEMPO/TEMPO2 .par file.\n\nFields\n\nname::String        — canonical parameter name (may include spaces, e.g. \"JUMP -be SCAMP\")\nname_symbol::Symbol — cached symbol version of name\nvalue::Union{Int64, BigFloat, String, Nothing}\nflag::Union{Int64, Nothing}           — fit flag (typically -1, 0, 1), optional\nuncertainty::Union{BigFloat, Nothing} — 1σ uncertainty, optional\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.TempoResidualEntry","page":"API","title":"GravityToolsNext.TempoResidualEntry","text":"TempoResidualEntry\n\nOne line from residuals.dat (TEMPO/TEMPO2). Values are converted to microseconds where appropriate (signal, residual, residual_tn, uncertainty).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.TempoRunOutput","page":"API","title":"GravityToolsNext.TempoRunOutput","text":"TempoRunOutput\n\nLow-level result of invoking TEMPO/TEMPO2 for a single settings bundle. This is not the scientific analysis; it only captures parsed iterations, file artifacts and a coarse success/status for the engine run.\n\nFields\n\nparsed     : Vector{InternalIterationOutput} parsed from stdout\nartifacts  : RunArtifacts with absolute paths to all on-disk products\nsuccess    : true when engine_ok ∧ parse_ok ∧ files_ok\nstatus     : :ok | :engine_failed | :parse_failed | :files_missing\nn_iter     : number of parsed iterations\nexit_code  : engine exit code (0 ok, 1 exception)\nstderr_tail: last ~1000 characters of stderr, or nothing\nstarted_at, finished_at, duration_s : coarse timing info\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.TempoRunSettings","page":"API","title":"GravityToolsNext.TempoRunSettings","text":"TempoRunSettings\n\nTop-level settings for a single TEMPO run. Composed from smaller structures:\n\npaths::RunPaths\nengine::EngineOptions\nmodifiers::InputModifiers\ncapture::CaptureOptions\nretention::RetentionOptions\nanalysis::WhiteNoiseOptions\nworkspace::WorkspaceOptions\nlogging::LoggingOptions\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.TempoRunSettings-Tuple{}","page":"API","title":"GravityToolsNext.TempoRunSettings","text":"TempoRunSettings(; kwargs...) -> TempoRunSettings\n\nKeyword-style construction with sensible defaults. Raises an error if nits < 1.\n\nKeyword arguments\n\nPaths: work_dir, par_input, par_output, tim_input\nExecution: tempo_version, flags, nits, gain\nModifiers: override_params, time_start, time_finish, couple_f1_to_ddot\nCapture: write_output, write_residuals\nRetention: save_internal_iterations, save_residuals\nWhite-noise analysis (convenience): white_noise_enabled, white_noise_scope (:final | :all) or pass analysis::WhiteNoiseOptions\nWorkspace (convenience): work_mode, job_name, overwrite (:error|:reuse|:unique|:clean), layout, temp_dir, link_tim, snapshot_par, cleanup_before_run, keep_tmp_on_success, keep_tmp_on_error, timeout_s, write_manifest, manifest_style or pass workspace::WorkspaceOptions\nLogging (convenience): verbosity, with_timestamps or pass logging::LoggingOptions\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.TimTOAEntry","page":"API","title":"GravityToolsNext.TimTOAEntry","text":"TimTOAEntry\n\nSingle TOA from a .tim file, after removing comments and headers.\n\nFields:\n\nindex::Int          : sequential index after removing comments/headers (1-based)\ntimfile_line::Int   : original line number in the .tim file (1-based)\ntoa::Float64        : MJD\nfreq::Float64       : observing frequency (MHz)\nuncertainty::Float64: TOA uncertainty (microseconds)\nbackend::String     : backend label (extracted from -be <name> if present, otherwise \"unknown\")\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.WhiteNoiseBackendFitResult","page":"API","title":"GravityToolsNext.WhiteNoiseBackendFitResult","text":"WhiteNoiseBackendFitResult\n\nPer-backend white-noise fit result.\n\nFields\n\nbackend       : backend id as Symbol\nefac,equad  : white-noise parameters used to scale uncertainties\noffset        : constant offset applied before normalization\nad_objective  : value of the optimized objective (e.g., AD A²)\nstats         : normalized residual stats with fitted efac/equad/offset\nsuccess       : parameters are finite/usable; diagnostics/stats computed\nconverged     : optimizer reported convergence (useful even if success=true)\n\nNotes\n\nWhen success == false, stats contains a neutral placeholder (from _empty_norm_stats()), and the pretty-printer skips printing the stats block for this backend.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.WhiteNoiseFitResult","page":"API","title":"GravityToolsNext.WhiteNoiseFitResult","text":"WhiteNoiseFitResult\n\nWhite-noise fit for all backends + global summary over concatenated normalized residuals.\n\nFields\n\nby_backend      : map backend => WhiteNoiseBackendFitResult\nglobal_stats    : summary over successful backends only\nfailed_backends : vector of backend ids that did not produce usable parameters (success=false)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.WhiteNoiseOptions","page":"API","title":"GravityToolsNext.WhiteNoiseOptions","text":"WhiteNoiseOptions(; enabled=false, scope=:final)\n\nOptions for white-noise analysis:\n\nenabled — toggle analysis;\nscope   — :final (last internal iteration) or :all (every internal iteration).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.WorkspaceOptions","page":"API","title":"GravityToolsNext.WorkspaceOptions","text":"WorkspaceOptions\n\nWorkspace/runtime controls for a single TEMPO run. The options are grouped by intent:\n\nLifecycle & isolation\n\nwork_mode::Symbol   : :inplace | :jobdir\n:inplace — run directly inside work_dir (job root = work_dir).\n:jobdir  — create/use a subdirectory of work_dir as an isolated job root.\njob_name::Union{Nothing,String} : subdirectory name when work_mode=:jobdir.\nIf nothing, an auto name like job-YYYYmmdd-HHMMSS-<rand> is generated.\noverwrite::Symbol   : :error | :reuse | :unique | :clean\nBehavior when the target job directory already exists (:unique appends -001, -002, ...).\n:error  — fail if exists; :reuse — use as-is; :clean — purge contents then use.\n:overwrite is accepted for backward compatibility and treated as :clean (a warning is emitted).\n\nLayout of files (inside the job root)\n\nlayout::Symbol      : :flat | :split\n:flat  — files live directly in the job root.\n:split — create input/, output/, tmp/ under the job root.\ntemp_dir::Union{Nothing,String}\nIf nothing, the execution cwd is the job root for :flat, or tmp/ for :split.\nIf non-nothing, use this subdirectory as the execution cwd (created if missing).\n\nI/O mirroring\n\nio_mirror::Union{Symbol,Int,Tuple{Symbol,Int}} = :none\nControls how the temp_dir (or job root) directory structure is mirrored for I/O.\n:none (flat), :full (mirror full temp_dir), Int (first N segments), (:depth_minus, k) (first depth-k segments).\nIgnored when layout = :flat.\n\nInputs capture into job root\n\nlink_tim::Bool     : symlink the .tim file instead of copying (falls back to copy if symlink fails).\nsnapshot_par::Bool : copy the input .par for reproducibility.\n\nCleanup & retention\n\ncleanup_before_run::Bool   : remove engine artifacts in the run directory before launch.\nkeep_tmp_on_success::Bool  : keep tmp/ after a successful run (useful for debugging).\nkeep_tmp_on_error::Bool    : keep tmp/ if the run failed.\n\nRuntime & manifest\n\ntimeout_s::Union{Nothing,Int} : kill the run after this many seconds (nothing = unlimited).\nwrite_manifest::Bool          : write a small manifest file in the job root.\nmanifest_style::Symbol        : :json | :toml.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.WorstParam","page":"API","title":"GravityToolsNext.WorstParam","text":"WorstParam\n\nNamed tuple describing the least stable fitted parameter: (name::Symbol, delta::Float64, uncertainty::Float64, ratio::Float64) where ratio = delta / uncertainty.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext._PriorNodeResult","page":"API","title":"GravityToolsNext._PriorNodeResult","text":"_PriorNodeResult\n\nInternal container holding data for a single grid node.\n\nFields\n\nindex         — 1-based node position on the grid\ntheta         — θ value at the node\nworkdir       — absolute path to the node's working directory\nlike_metric   — scalar metric used as a likelihood proxy (e.g. metrics[:chi2_fit])\nprior_density — prior pdf value π(θ) at this node\nresult        — node's GeneralTempoResult\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext._PriorNodeResult-Tuple{Int64, Float64, AbstractString, GeneralTempoResult, Symbol, Any}","page":"API","title":"GravityToolsNext._PriorNodeResult","text":"Convenience constructor that computes like_metric and prior_density.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{InternalIterationOutput, Union{String, Symbol}}","page":"API","title":"Base.getindex","text":"getindex(output::InternalIterationOutput, key::Union{String,Symbol})\n\nConvenience lookup. If key matches a field in BasicTempoOutput, returns it. Otherwise, if it matches a parameter name, returns the corresponding FitParameter. Throws KeyError if nothing matches.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, AbstractTempoVersion}","page":"API","title":"Base.show","text":"Pretty-print Tempo/Tempo2. Supports inline one-liner via IOContext key :inline => true.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, AdaptiveRefinement2DGrid}","page":"API","title":"Base.show","text":"Base.show(io::IO, ::MIME\"text/plain\", grid::AdaptiveRefinement2DGrid)\n\nPretty-print the AdaptiveRefinement2DGrid with variable, parameter, axis, and refinement information.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, TempoParFile}","page":"API","title":"Base.show","text":"Base.show(io::IO, par_file::TempoParFile)\n\nPretty-prints the .par file name, directory, and all parameters in order.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._apply_coupling_f1_to_ddot!-Tuple{TempoParFile, AbstractVector{TempoParameter}}","page":"API","title":"GravityToolsNext._apply_coupling_f1_to_ddot!","text":"_apply_coupling_f1_to_ddot!(pf, overrides) -> TempoParFile\n\nIf DDOT (or F2) is present in overrides and F1 is not overridden, adjust F1 according to the heuristic ΔF1 = - F0 * (DDOTnew - DDOTbase) / D, using values from pf:\n\nF0, F1 read from the current pf (pre-override state),\nDDOT_base from pf[:DDOT] if present, otherwise pf[:F2], else 0,\nD from pf[:D] if present, else 1.\n\nThe new F1 is upserted into pf.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._assemble_prior_result-Tuple{PriorMarginalizedTempoTask, Vector{Float64}, Vector{GravityToolsNext._PriorNodeResult}}","page":"API","title":"GravityToolsNext._assemble_prior_result","text":"_assemble_prior_result(task, thetas, nodes) -> GeneralTempoResult\n\nAssemble the top-level prior-marginalized result:\n\nchoose a reference (θref, mref) and convert node metrics into log-likelihoods;\ncompute discrete posterior weights on the node grid and summarize them;\nintegrate a continuous (spline-based) posterior for moments/evidence/χ² summaries;\nselect a representative node result for the structural fields;\nmarginalize model parameter estimates across nodes using posterior weights;\nmerge metrics/extras and metadata; optionally attach node subresults.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._bad_prior_result-Tuple{PriorMarginalizedTempoTask, GravityToolsNext._PriorNodeResult, Int64}","page":"API","title":"GravityToolsNext._bad_prior_result","text":"_bad_prior_result(task, bad_node, nodes_done) -> GeneralTempoResult\n\nReturn the GeneralTempoResult of a failing node augmented with prior/marginalization context in metadata. Used when on_error == :stop.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._build_thetas-Tuple{PriorMarginalizationSettings}","page":"API","title":"GravityToolsNext._build_thetas","text":"_build_thetas(s) -> Vector{Float64}\n\nConstruct the θ grid according to s.nodes using the given prior.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._check_nodes_for_error-Tuple{Vector{GravityToolsNext._PriorNodeResult}, Symbol}","page":"API","title":"GravityToolsNext._check_nodes_for_error","text":"_check_nodes_for_error(nodes, on_error) -> Union{Nothing, Int}\n\nReturn the 1-based index of the first failing node according to the policy, or nothing if execution should proceed. Currently supports on_error == :stop.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._choose_representative-Tuple{PriorMarginalizationSettings, Vector{Float64}, Vector{Float64}}","page":"API","title":"GravityToolsNext._choose_representative","text":"_choose_representative(s, thetas, metrics) -> θ\n\nSelect a representative θ for reporting/subresult extraction (e.g. prior median or grid argmin).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._empty_norm_stats-Tuple{}","page":"API","title":"GravityToolsNext._empty_norm_stats","text":"_empty_norm_stats() -> NormalizedResidualStats\n\nReturn a neutral/empty NormalizedResidualStats so downstream code doesn't crash on empty groups. Internal helper.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._extract_metric-Tuple{GeneralTempoResult, Symbol}","page":"API","title":"GravityToolsNext._extract_metric","text":"_extract_metric(res::GeneralTempoResult, key::Symbol) -> Float64\n\nFetch a scalar metric from res.metrics, with a friendly error if missing.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._group_by_backend-Tuple{Vector{CombinedTOAEntry}}","page":"API","title":"GravityToolsNext._group_by_backend","text":"_group_by_backend(entries; in_fit=nothing) -> Dict{Symbol, Vector{CombinedTOAEntry}}\n\nGroup entries by backend (Symbol). Optionally filter by in_fit:\n\nnothing : no filtering\ntrue    : only in-fit\nfalse   : only not in-fit\n\nInternal helper.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._header_length-Tuple{Vector{Tuple{Int64, String}}}","page":"API","title":"GravityToolsNext._header_length","text":"_header_length(clean_lines)\n\nInternal: returns the number of initial non-comment lines to treat as header. Backward-compatible default: first 2 non-comment lines.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._integrate_posterior-Tuple{Vector{Float64}, Vector{Float64}, AbstractPriorSpec}","page":"API","title":"GravityToolsNext._integrate_posterior","text":"_integrate_posterior(thetas, metrics, prior; kwargs...) -> NamedTuple\n\nSpline-approximate χ²(θ) from node metrics, combine with the prior to form a continuous posterior p(θ) ∝ exp(logL(θ))·π(θ), and evaluate evidence (log-domain), posterior moments, and χ² summaries.\n\nReturns a named tuple with fields:\n\nlogZ  (log-evidence), evidence (may be Inf if exp(logZ) overflows), mean, var, std, median, mode, quad_error,\nθgrid, pgrid (normalized density on the returned grid),\nchi2_post_mean_spline, chi2_at_post_mean_spline, chi2_marginalized.\n\nNotes\n\nNumerical stabilization uses c = max(Lgrid) and integrates Z0 = ∫ exp(L(θ)−c) dθ. Then: logZ = log(Z0) + c. We avoid forming Z = Z0*exp(c) directly.\nMoments are computed as ratios in the stabilized domain: E[θ] = m1/Z0, E[θ²] = m2/Z0, Var[θ] = E[θ²] − E[θ]².\nchi2_marginalized = −2*logZ + mref is stable even when exp(logZ) would overflow.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._is_comment_or_blank-Tuple{AbstractString}","page":"API","title":"GravityToolsNext._is_comment_or_blank","text":"_is_comment_or_blank(s)\n\nInternal: returns true if the line is blank or looks like a comment in a .tim file.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._load_final_par_file-Tuple{AbstractString}","page":"API","title":"GravityToolsNext._load_final_par_file","text":"_load_final_par_file(par_out_path::AbstractString) :: Union{TempoParFile,Nothing}\n\nAttempt to read the final output .par file produced by TEMPO/TEMPO2. Returns a TempoParFile on success or nothing when the file is absent or cannot be parsed.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._make_node_task-Tuple{SingleTempoTask, PriorMarginalizationSettings, Int64, Float64, Bool}","page":"API","title":"GravityToolsNext._make_node_task","text":"_make_node_task(base_task, s, i, θ) -> (node_task, node_tag, node_dir, par_out)\n\nConstruct a per-node task by:\n\nderiving a leaf node_dir name (no leading \"nodes/\"),\nderiving node_tag = basename(node_dir),\nderiving per-node par_output name,\ncloning base_task with updated temp_dir, par_output, io_mirror, and an upserted parameter (s.parameter => θ) with pin-mode flag.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._marginalize_param_estimates-Tuple{Vector{GravityToolsNext._PriorNodeResult}, Vector{Float64}}","page":"API","title":"GravityToolsNext._marginalize_param_estimates","text":"_marginalize_param_estimates(nodes, w) -> Dict{Symbol, ParamEstimate}\n\nCompute posterior-marginalized parameter estimates across nodes using weights w. For each parameter name seen in any node, compute the pooled mean and the total uncertainty via the law of total variance.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._normalized_shifted_residuals_for_backend-Tuple{Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}","page":"API","title":"GravityToolsNext._normalized_shifted_residuals_for_backend","text":"_normalized_shifted_residuals_for_backend(residuals, uncertainties_orig, efac, equad, offset)\n    -> Vector{Float64}\n\nTransform uncertainties (σ' = sqrt((efac·σ)^2 + equad^2)) and compute shifted, normalized residuals (residuals - offset) ./ σ' for a single backend. Returns a vector aligned with the inputs (no filtering performed here). Inputs are assumed to be in microseconds (µs); the result is unitless.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._posterior_summary-Tuple{Vector{Float64}, Vector{Float64}}","page":"API","title":"GravityToolsNext._posterior_summary","text":"_posterior_summary(thetas, w) -> Dict{Symbol,Float64}\n\nReturn basic discrete summaries on the node grid: posterior mean, median, mode, and a normalization check.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._posterior_weights-Tuple{Vector{Float64}, Vector{Float64}, AbstractPriorSpec}","page":"API","title":"GravityToolsNext._posterior_weights","text":"_posterior_weights(thetas, loglikes, prior) -> Vector{Float64}\n\nCompute normalized posterior weights on the node grid: wi ∝ exp(logLi) * π(θ_i), normalized with log-sum-exp stabilization.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._prepare_node_workdir-Tuple{AbstractString, PriorExecutionOptions, Int64, Symbol, Float64}","page":"API","title":"GravityToolsNext._prepare_node_workdir","text":"_prepare_node_workdir(base_dir, exec, idx, param, theta) -> String\n\nCreate (if needed) and return the node working directory under base_dir. Also writes a small node_meta.txt with index/parameter/θ for traceability.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._resolve_reference-Tuple{PriorMarginalizationSettings, Vector{Float64}, Vector{Float64}}","page":"API","title":"GravityToolsNext._resolve_reference","text":"_resolve_reference(s, thetas, metrics) -> (θref, mref)\n\nChoose a reference θ and its metric value used for χ² shifting and reporting. Supported strategies:\n\n:grid_argmin     — θ at argmin of node metrics\n:spline_argmin   — currently uses node argmin (spline argmin may be added later)\n:prior_median    — θ at prior median (nearest node)\n:custom_value    — user-provided s.ref_value\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._rule_linvals-Tuple{ExplicitRule, Float64, Float64, Int64}","page":"API","title":"GravityToolsNext._rule_linvals","text":"_rule_linvals(rule::ExplicitRule, min::Float64, max::Float64, N::Int)\n\nFor an explicit axis, the linear parameterization equals the stored values.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._rule_linvals-Tuple{LinRule, Float64, Float64, Int64}","page":"API","title":"GravityToolsNext._rule_linvals","text":"_rule_linvals(rule::LinRule, min::Float64, max::Float64, N::Int)\n\nReturn linear parameterization for a linear axis.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._rule_linvals-Tuple{LogRule, Float64, Float64, Int64}","page":"API","title":"GravityToolsNext._rule_linvals","text":"_rule_linvals(rule::LogRule, min::Float64, max::Float64, N::Int)\n\nReturn uniformly spaced samples in log10(|x|) for a logarithmic axis. Throws if min/max are zero or have different signs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._rule_values-Tuple{ExplicitRule, Vector{Float64}}","page":"API","title":"GravityToolsNext._rule_values","text":"_rule_values(rule::ExplicitRule, lin::Vector{Float64}; min_hint::Float64=NaN)\n\nFor an explicit axis, physical values equal the stored values. min_hint is accepted for a uniform API and ignored.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._rule_values-Tuple{LinRule, Vector{Float64}}","page":"API","title":"GravityToolsNext._rule_values","text":"_rule_values(rule::LinRule, lin::Vector{Float64}; min_hint::Float64=NaN)\n\nFor a linear axis, physical values coincide with the linear parameterization. min_hint is accepted for a uniform API and ignored.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._rule_values-Tuple{LogRule, Vector{Float64}}","page":"API","title":"GravityToolsNext._rule_values","text":"_rule_values(rule::LogRule, lin::Vector{Float64}; min_hint::Float64=1.0)\n\nMap logarithmic linear samples back to physical space, using the rule sign if provided or the sign inferred from min_hint (axis min) for auto-sign.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._run_nodes_serial!-Tuple{PriorMarginalizedTempoTask, Vector{Float64}}","page":"API","title":"GravityToolsNext._run_nodes_serial!","text":"_run_nodes_serial!(task, thetas) -> Vector{_PriorNodeResult}\n\nRun node tasks sequentially (optionally in chained mode) and collect node results. Handles per-node task derivation, execution, metric extraction, and chaining source updates. Implements on_error == :stop policy for early stopping on node failure.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._split_iterations-Tuple{AbstractString}","page":"API","title":"GravityToolsNext._split_iterations","text":"_split_iterations(output::AbstractString) -> Vector{SubString{String}}\n\nSplit the full output into iteration sections by anchor lines, BUT keep any preamble BEFORE the first anchor as part of the FIRST section (so early errors are captured). Anchors supported: lines starting with Complete fit, RMS pre-fit residual, or ss/fs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext._wn_mask-Tuple{Int64, Symbol}","page":"API","title":"GravityToolsNext._wn_mask","text":"_wn_mask(niter::Int, scope::Symbol) :: BitVector\n\nConstruct a boolean mask that selects which iterations will undergo white-noise analysis:\n\n:all   — all iterations are selected\n:final — only the last iteration is selected\n\nUnknown scopes are treated defensively as :final.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.ad_objective_function!-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}}","page":"API","title":"GravityToolsNext.ad_objective_function!","text":"ad_objective_function!(residuals_norm, residuals, uncertainties_tr) -> A²\n\nFill residuals_norm .= residuals ./ uncertainties_tr and return Anderson–Darling A². Mutates residuals_norm as a working buffer.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.ad_objective_function-Tuple{Vector{Float64}}","page":"API","title":"GravityToolsNext.ad_objective_function","text":"AD objective from precomputed normalized residuals.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.ad_objective_function_fit_offset!-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}}","page":"API","title":"GravityToolsNext.ad_objective_function_fit_offset!","text":"ad_objective_function_fit_offset!(residuals_shifted_norm, residuals, uncertainties_tr)\n    -> (A²_min, offset*)\n\n1D minimize A² over offset, given fixed uncertainties_tr. Uses Optim.optimize. Mutates residuals_shifted_norm as a working buffer.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.ad_objective_function_with_offset!-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64}","page":"API","title":"GravityToolsNext.ad_objective_function_with_offset!","text":"ad_objective_function_with_offset!(residuals_shifted_norm, residuals, uncertainties_tr, offset) -> A²\n\nFill residuals_shifted_norm .= (residuals .- offset) ./ uncertainties_tr and return A². Mutates residuals_shifted_norm as a working buffer.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.axisvalues-Tuple{GridAxis}","page":"API","title":"GravityToolsNext.axisvalues","text":"axisvalues(ax)\n\nReturn the physical coordinates for an axis. For LogAxis, uses the rule sign (+1/−1) or infers it from ax.min when the rule is constructed with LogRule().\n\nThe result is a copy (safe to mutate by the caller).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.build_convergence_info-Tuple{Vector{InternalIterationResult}}","page":"API","title":"GravityToolsNext.build_convergence_info","text":"build_convergence_info(iterations; thresholds=default_convergence_thresholds())\n    -> ConvergenceInfo\n\nConstructs convergence time series from iterations that have residual statistics. pre_post_final is taken strictly from the last iteration; if unavailable there, it is NaN. The worst_parameter is taken from the last successful iteration that provides a fit-parameter table.\n\nWhen only one valid point is available, the decision converged falls back to pre_post_final.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.build_convergence_series-Tuple{Vector{Float64}}","page":"API","title":"GravityToolsNext.build_convergence_series","text":"build_convergence_series(values) -> ConvergenceSeries\n\nConstructs absolute and relative last-step deltas for a numeric sequence. Relative delta uses a stable denominator max(abs(prev), eps()).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.build_core_metrics-Tuple{InternalIterationResult, GravityToolsNext.ConvergenceInfo}","page":"API","title":"GravityToolsNext.build_core_metrics","text":"build_core_metrics(final_it::InternalIterationResult, conv::ConvergenceInfo;\n                   include_tim::Bool=true,\n                   include_tim_even_if_same::Bool=false)\n    -> Dict{Symbol,Float64}\n\nProduce a compact, task-agnostic set of scalar metrics from the final iteration and convergence info. Missing pieces are filled with NaN.\n\nIncluded keys (always):\n\n:chi2fit, :chi2rfit, :wrmsfit, :wrmstn_fit\n:prepostfinal\n:deltawrmstn, :delta_chi2\n:adwhitefit   (global AD after white-noise fit; NaN if not available)\n\nAdditionally (only if include_tim == true and either the in-fit and in-tim sets differ or include_tim_even_if_same == true):\n\n:chi2tim, :chi2rtim, :wrmstim, :wrmstn_tim\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.build_general_tempo_result-Tuple{Vector{InternalIterationResult}}","page":"API","title":"GravityToolsNext.build_general_tempo_result","text":"build_general_tempo_result(\n    iterations;\n    par_file_final=nothing,\n    subresults=GeneralTempoResult[],\n    subresult_type=nothing,\n    metadata=Dict(),\n    metrics_hook=nothing\n)\n\nBuild a GeneralTempoResult from a list of InternalIterationResults.\n\nUses the last iteration as final (index final_index = length(iterations)).\nComputes last_successful_index (last iteration with no error and with stats); 0 if none.\nComputes convergence across all iterations with available stats.\nExtracts parameter estimates from the final iteration.\nComputes metrics via build_core_metrics(final, convergence) and optionally merges a user-supplied metrics_hook(final, convergence) dictionary (values must be Real).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.build_internal_iteration_result-Tuple{InternalIterationOutput, Union{Nothing, String}, Vector{TimTOAEntry}}","page":"API","title":"GravityToolsNext.build_internal_iteration_result","text":"build_internal_iteration_result(output, residual_path, tim_entries; kwargs...) -> InternalIterationResult\n\nBuild a single-iteration result from parsed TEMPO output and (optionally) residuals on disk.\n\nBehavior\n\nDoes not return early on TEMPO errors; instead records the error and proceeds to attempt residual loading/combination guardedly.\nReads residuals via a safe wrapper; if the file is missing or unreadable, residuals are nothing.\nCombines TIM entries with residuals using a safe combiner; on length mismatch or missing inputs, combination yields nothing.\nOptionally performs white-noise fitting (analyze_white_noise=true) on combined in-fit data when available.\nRecords per-stage flags in metadata for downstream diagnostics.\n\nKeywords\n\nsave_residuals::Bool=false — keep raw residual rows inside the result\nanalyze_white_noise::Bool=false — run per-backend white-noise fit\ntime_start::Union{Nothing,Float64}=nothing — lower MJD bound for combining\ntime_finish::Union{Nothing,Float64}=nothing — upper MJD bound for combining\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.build_node_dirname-Tuple{AbstractString, Integer}","page":"API","title":"GravityToolsNext.build_node_dirname","text":"build_node_dirname(prefix, idx; pad=3, param=:θ, theta=nothing, mode=:index_only, sig=6) -> String\n\nBuild a per-node directory name according to the selected naming mode.\n\n:index_only → uses only an index with zero-padding.\n:with_value → additionally appends __<PARAM>=<VALUE> where <VALUE> is compact-formatted.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.build_residual_statistics_group-Tuple{Vector{CombinedTOAEntry}}","page":"API","title":"GravityToolsNext.build_residual_statistics_group","text":"build_residual_statistics_group(entries) -> ResidualStatisticsGroup\n\nBuild statistics for in-fit and in-tim sets. If there is no time window (i.e. all entries are in-fit), the same ResidualStatisticsEntry object is reused (aliased) for both fields to avoid duplicate computation/memory. You can detect this via group.in_fit === group.in_tim.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.build_white_noise_fit-Tuple{Vector{CombinedTOAEntry}}","page":"API","title":"GravityToolsNext.build_white_noise_fit","text":"build_white_noise_fit(entries::Vector{CombinedTOAEntry}) -> WhiteNoiseFitResult\n\nPer-backend estimation of (efac, equad, offset) on in-fit TOAs. Robust to empty groups and solver failures. Produces per-backend normalized residual stats and a global summary. Inputs are expected in microseconds (µs) for residuals and TOA uncertainties; normalized residuals are unitless.\n\nBehavior\n\nIf a backend fails (throws) or yields non-finite parameters, it is marked success=false and added to failed_backends. Its stats are set to a neutral placeholder and its contribution is excluded from global_stats.\nglobal_stats are computed by concatenating normalized residuals from successful backends only.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.calculate_2DGrid-Tuple{AdaptiveRefinement2DGrid, Any, Any}","page":"API","title":"GravityToolsNext.calculate_2DGrid","text":"calculate_2DGrid(grid, target_function, params_function!)\n\nCalculate and adaptively refine the grid up to the desired refinement level.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.calculate_cell!-Tuple{Int64, Int64, AdaptiveRefinement2DGrid, AdaptiveRefinement2DGrid, Any}","page":"API","title":"GravityToolsNext.calculate_cell!","text":"calculate_cell!(i_cell, j_cell, grid, grid_refined, target_function)\n\nCalculate values for all new points introduced by refining a cell.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.calculate_point!-NTuple{7, Any}","page":"API","title":"GravityToolsNext.calculate_point!","text":"calculate_point!(p, i_ref, j_ref, grid, grid_refined, target_function, lock_obj)\n\nRemotely calculate the value at a point in the refined grid and update both grids with locking.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cell_selector-Tuple{Int64, Int64, AdaptiveRefinement2DGrid, ContourUnit}","page":"API","title":"GravityToolsNext.cell_selector","text":"cell_selector(i_cell, j_cell, grid, ref_unit::ContourUnit)\n\nSelects cells where the cell crosses a specified contour value.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cell_selector-Tuple{Int64, Int64, AdaptiveRefinement2DGrid, DiffContourUnit}","page":"API","title":"GravityToolsNext.cell_selector","text":"cell_selector(i_cell, j_cell, grid, ref_unit::DiffContourUnit)\n\nSelects cells where the cell crosses a contour and the difference exceeds a threshold.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cell_selector-Tuple{Int64, Int64, AdaptiveRefinement2DGrid, DiffUnit}","page":"API","title":"GravityToolsNext.cell_selector","text":"cell_selector(i_cell, j_cell, grid, ref_unit::DiffUnit)\n\nSelects cells where the difference across the cell exceeds a threshold.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cell_selector-Tuple{Int64, Int64, AdaptiveRefinement2DGrid, FullUnit}","page":"API","title":"GravityToolsNext.cell_selector","text":"cell_selector(i_cell, j_cell, grid, ref_unit::FullUnit)\n\nSelects cells where the min/max value is within specified bounds.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cell_selector-Tuple{Int64, Int64, AdaptiveRefinement2DGrid, LocalMinimaUnit}","page":"API","title":"GravityToolsNext.cell_selector","text":"cell_selector(i_cell, j_cell, grid, ref_unit::LocalMinimaUnit; at_corner=false)\n\nSelects cells containing a unique local minimum within a specified range.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cell_selector-Tuple{Int64, Int64, AdaptiveRefinement2DGrid, RelDiffUnit}","page":"API","title":"GravityToolsNext.cell_selector","text":"cell_selector(i_cell, j_cell, grid, ref_unit::RelDiffUnit)\n\nSelects cells where the relative difference across the cell exceeds a threshold.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cell_selector-Tuple{Int64, Int64, AdaptiveRefinement2DGrid}","page":"API","title":"GravityToolsNext.cell_selector","text":"cell_selector(i_cell, j_cell, grid)\n\nDetermine if the cell at (icell, jcell) should be refined according to the refinement settings.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.chisq_stats-Tuple{Vector{Float64}, Vector{Float64}}","page":"API","title":"GravityToolsNext.chisq_stats","text":"chisq_stats(res, unc; dof=length(res)) -> (χ², χ²_red)\n\nFor raw residuals with transformed uncertainties unc.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.chisq_stats-Tuple{Vector{Float64}}","page":"API","title":"GravityToolsNext.chisq_stats","text":"chisq_stats(res_norm; dof=length(res_norm)) -> (χ², χ²_red)\n\nFor already normalized residuals (σ'=1 scale), χ² = ∑ r².\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cleanup_old_tempo_files-Tuple{MaterializedJob}","page":"API","title":"GravityToolsNext.cleanup_old_tempo_files","text":"cleanup_old_tempo_files(job::MaterializedJob) -> Nothing\n\nRemove common TEMPO/TEMPO2 byproducts in job.job_root (and the resolved par_out_path). This is a pre-run hygiene step and never touches user inputs or previous persisted results outside the known byproduct set.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cleanup_run!-Tuple{GravityToolsNext.TempoRunOutput, TempoRunSettings}","page":"API","title":"GravityToolsNext.cleanup_run!","text":"cleanup_run!(output::TempoRunOutput, settings::TempoRunSettings; success::Bool=output.success) -> Nothing\n\nErgonomic overload that accepts a TempoRunOutput. Delegates to the RunArtifacts-based method. Override success if your task-level success criterion differs from the engine-level one.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cleanup_run!-Tuple{RunArtifacts, TempoRunSettings}","page":"API","title":"GravityToolsNext.cleanup_run!","text":"cleanup_run!(artifacts::RunArtifacts, settings::TempoRunSettings; success::Bool=true) -> Nothing\n\nRemove the working directory (run_cwd) when it is a dedicated subdirectory (e.g., tmp/). This is a post-run hygiene step controlled by keep_tmp_on_success / keep_tmp_on_error. It never touches input_dir or output_dir and is safe to call multiple times.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.combine_tim_and_residuals-Tuple{Vector{TimTOAEntry}, Vector{TempoResidualEntry}}","page":"API","title":"GravityToolsNext.combine_tim_and_residuals","text":"combine_tim_and_residuals(tim_entries, residuals; time_start=nothing, time_finish=nothing)\n    -> Vector{CombinedTOAEntry}\n\nCombine .tim entries and residuals 1:1 (by index). Optional time window (MJD) marks in_fit for each entry. Lengths must match; this function throws a DimensionMismatch exception on mismatch. Use combine_tim_and_residuals_safe for a non-throwing variant.\n\nNotes:\n\nweight = 1 / uncertainty^2 if uncertainty is positive and finite; otherwise 0.0.\nTime window is inclusive: time_start ≤ toa ≤ time_finish when both are provided.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.combine_tim_and_residuals_safe-Tuple{Union{Nothing, Vector{TimTOAEntry}}, Union{Nothing, Vector{TempoResidualEntry}}}","page":"API","title":"GravityToolsNext.combine_tim_and_residuals_safe","text":"combine_tim_and_residuals_safe(\n    tim_entries::Union{Nothing,Vector{TimTOAEntry}},\n    residuals::Union{Nothing,Vector{TempoResidualEntry}};\n    time_start::Union{Nothing,Float64}=nothing,\n    time_finish::Union{Nothing,Float64}=nothing,\n) -> Union{Nothing, Vector{CombinedTOAEntry}}\n\nSafe (non-throwing) wrapper around combine_tim_and_residuals. Returns nothing in any of the following cases (and logs a warning):\n\ntim_entries === nothing or residuals === nothing\neither input is empty\nlength mismatch between the two inputs\n\nOtherwise, returns the combined vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.copy_par_file-Tuple{TempoParFile}","page":"API","title":"GravityToolsNext.copy_par_file","text":"copy_par_file(par_file; new_name=nothing, suffix=nothing, new_dir=par_file.dir, deep_copy=false)\n\nReturn a (possibly shallow) copy of par_file with optional file/dir changes.\n\nPrecedence for filename:\n\nif new_name is provided -> use it,\nelse if suffix is provided -> append _suffix before \".par\",\nelse -> keep original name.\n\nEnsures the result ends with .par.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.copy_with-Tuple{TempoRunSettings}","page":"API","title":"GravityToolsNext.copy_with","text":"copy_with(s::TempoRunSettings; kwargs...) -> TempoRunSettings\n\nCreate a modified copy of s with keyword overrides. You can override either whole sub-structs (analysis, workspace, logging) or individual convenience keys (e.g. white_noise_enabled, timeout_s, verbosity, ...).\n\nAdditional override-params controls:\n\noverride_params_clear::Bool=false: start from an empty override list.\noverride_params_delete: names (Symbol/String or a collection of them) to remove from overrides.\noverride_params_upsert::Vector{TempoParameter}=TP[]: add/replace overrides by name.\n\nIf override_params is provided, delete/upsert are applied on top of it.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.cpad_display-Tuple{AbstractString, Integer}","page":"API","title":"GravityToolsNext.cpad_display","text":"cpad_display(s, w) -> String\n\nCenter-pad string s to width w (using display width). Left pad gets the floor, right pad the remainder. Returns a new String.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.default_convergence_thresholds-Tuple{}","page":"API","title":"GravityToolsNext.default_convergence_thresholds","text":"default_convergence_thresholds() -> Dict{Symbol,Float64}\n\nDefault limits used by is_converged:\n\n:abs_wrms_tn  — absolute delta of TN-weighted WRMS\n:abs_chisqr   — absolute delta of χ²\n:pre_post_final — |prepostfinal − 1|\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.default_par_output-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.default_par_output","text":"default_par_output(par_input::AbstractString) -> String\n\nGenerate a default output file name (no directories) by taking basename(par_input) and replacing its .par extension with *_out.par.\n\nAccepts either a bare filename or any path.\nStill enforces that the basename ends with .par (case‑insensitive).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.delete_param!-Tuple{TempoParFile, Union{AbstractString, Symbol}}","page":"API","title":"GravityToolsNext.delete_param!","text":"delete_param!(pf, name) -> Bool\n\nDelete by name from params and remove from order. Returns true if deleted.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.delete_param!-Tuple{Vector{TempoParameter}, Union{AbstractString, Symbol}}","page":"API","title":"GravityToolsNext.delete_param!","text":"delete_param!(params, name) -> Bool\n\nDelete parameter by name if present. Returns true if deleted.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.delete_params!-Tuple{TempoParFile, Any}","page":"API","title":"GravityToolsNext.delete_params!","text":"delete_params!(pf, names) -> Int\n\nDelete all parameters listed in names. Returns the number of deletions.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.delete_params!-Tuple{Vector{TempoParameter}, Any}","page":"API","title":"GravityToolsNext.delete_params!","text":"delete_params!(params, names) -> Int\n\nDelete all parameters whose names are in names. Returns count deleted. Preserves relative order of remaining items.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.estimate_white_noise_ad_with_offset-Tuple{Vector{Float64}, Vector{Float64}}","page":"API","title":"GravityToolsNext.estimate_white_noise_ad_with_offset","text":"estimate_white_noise_ad_with_offset(residuals, uncertainties_orig; kwargs...)\n    -> (efac, equad, offset, ad_objective, converged)\n\nJointly estimate (efac, equad, offset) by minimizing AD A² of normalized residuals.\n\nIf no initial guesses are provided, builds a small grid over equad and target std(res_norm), solves efac for each pair, fits offset, and seeds Optim.optimize.\nMutates working buffers internally for performance (documented below).\nconverged is the boolean flag returned by Optim.converged(...) for the outer 3D solve.\n\nNotes\n\nInputs are expected in µs for residuals and TOA uncertainties; the objective uses unitless normalized residuals.\nOn severely degenerate inputs (e.g., zero variance or infeasible seeds), the optimizer may throw; callers are expected to guard with try/catch (as done in build_white_noise_fit) and mark the backend as failed.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.eval_nodes-Tuple{AbstractPriorSpec, ClenshawCurtisNodes}","page":"API","title":"GravityToolsNext.eval_nodes","text":"eval_nodes(prior, rule::ClenshawCurtisNodes) -> θ::Vector{Float64}\n\nChebyshev–Clenshaw–Curtis nodes on u∈(0,1), trimmed at max(rule.eps, PRIOR_U_EPS), then mapped to parameter space via prior_invcdf.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.eval_nodes-Tuple{AbstractPriorSpec, ExplicitThetaNodes}","page":"API","title":"GravityToolsNext.eval_nodes","text":"eval_nodes(prior, rule::ExplicitThetaNodes) -> θ::Vector{Float64}\n\nReturn a sorted, deduplicated copy of the provided θ-values (no inv-CDF mapping).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.eval_nodes-Tuple{AbstractPriorSpec, QuantileNodes}","page":"API","title":"GravityToolsNext.eval_nodes","text":"eval_nodes(prior, rule::QuantileNodes) -> θ::Vector{Float64}\n\nClamp provided quantiles to (PRIORUEPS, 1-PRIORUEPS) and map via prior_invcdf.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.extract_tempo_parameter_from_line-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.extract_tempo_parameter_from_line","text":"extract_tempo_parameter_from_line(line) -> TempoParameter\n\nParse one .par line using a simple grammar:\n\nname is either 1 token, or 3 tokens if the first three tokens are non-numeric strings (e.g. \"JUMP -be SCAMP\", \"TNEF -be SCAMP\").\nThen go: value (String/Int64/BigFloat), optional flag (Int64), optional uncertainty (BigFloat).\nIf there is one trailing token after value:\nInt64 → it's a flag\nBigFloat → it's an uncertainty\nIf there are two trailing tokens after value and they look like Int64 then BigFloat, treat them as flag and uncertainty respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.find_efac_for_fixed_equad_and_std!-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64}","page":"API","title":"GravityToolsNext.find_efac_for_fixed_equad_and_std!","text":"find_efac_for_fixed_equad_and_std!(residuals_norm, uncertainties_tr, residuals, uncertainties_orig,\n                                   equad_fixed, std_res_norm_target) -> efac\n\nSolve for efac such that std(residuals ./ σ′(efac, equadfixed)) ≈ stdresnormtarget.\n\nNotes:\n\nMonotone in efac (for fixed equad), so we first try to bracket a root and use Bisection().\nMutates residuals_norm and uncertainties_tr as work buffers; no allocations.\nReturns NaN if the target is infeasible or a robust root was not found.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.find_worst_parameter-Tuple{Vector{FitParameter}}","page":"API","title":"GravityToolsNext.find_worst_parameter","text":"find_worst_parameter(fit_params) -> WorstParam | nothing\n\nFinds the parameter with the largest absolute ratio |Δ/σ| among parameters with fit_flag = true and finite uncertainties (σ > 0). Returns a named tuple WorstParam or nothing if no suitable parameters are present.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.format_short-Tuple{Real}","page":"API","title":"GravityToolsNext.format_short","text":"format_short(x; sig=6) -> String\n\nCompact scientific formatting for real numbers. Preserves NaN/Inf in a readable form.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.generate_par_file_name-Tuple{String, String}","page":"API","title":"GravityToolsNext.generate_par_file_name","text":"generate_par_file_name(base_name::String, suffix::String) -> String\n\nGenerates a new .par filename by removing the existing extension (if any), appending _suffix, and adding .par.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.get_convergence_metric-Tuple{GravityToolsNext.ConvergenceInfo, Symbol}","page":"API","title":"GravityToolsNext.get_convergence_metric","text":"get_convergence_metric(info, key) -> Float64\n\nMaps a threshold key to the corresponding last-step delta (or |prepostfinal−1|). Returns NaN if the metric is not available.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.get_in-Tuple{Any, AbstractVector{Symbol}}","page":"API","title":"GravityToolsNext.get_in","text":"get_in(obj, path::AbstractVector{Symbol})\n\nFollow path through nested getproperty calls: e.g. get_in(x, [:stats, :std]) is equivalent to x.stats.std.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.get_par_file_representation-Tuple{TempoParameter}","page":"API","title":"GravityToolsNext.get_par_file_representation","text":"get_par_file_representation(param) -> String\n\nReturn a fixed-width .par line: name, value, optional flag, optional uncertainty. Format numerics with up to 21 significant digits; increase if needed.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.get_param-Tuple{AbstractVector{TempoParameter}, Union{AbstractString, Symbol}}","page":"API","title":"GravityToolsNext.get_param","text":"get_param(params, name; default=nothing) -> Union{TempoParameter,Nothing}\n\nReturn a parameter by name or default if missing.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.get_param-Tuple{TempoParFile, Union{AbstractString, Symbol}}","page":"API","title":"GravityToolsNext.get_param","text":"get_param(pf, name; default=nothing) -> Union{TempoParameter,Nothing}\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.has_param-Tuple{AbstractVector{TempoParameter}, Union{AbstractString, Symbol}}","page":"API","title":"GravityToolsNext.has_param","text":"has_param(params, name) -> Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.has_param-Tuple{TempoParFile, Union{AbstractString, Symbol}}","page":"API","title":"GravityToolsNext.has_param","text":"has_param(pf, name) -> Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.in_fit_equals_in_tim-Tuple{ResidualStatisticsGroup}","page":"API","title":"GravityToolsNext.in_fit_equals_in_tim","text":"in_fit_equals_in_tim(group::ResidualStatisticsGroup) -> Bool\n\nReturns true if the group used a single aliased entry for both fields (no time window), i.e. group.in_fit === group.in_tim.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.interpolate_cell!-Tuple{Int64, Int64, AdaptiveRefinement2DGrid, AdaptiveRefinement2DGrid}","page":"API","title":"GravityToolsNext.interpolate_cell!","text":"interpolate_cell!(i, j, grid, grid_refined)\n\nInterpolate values for new points in the refined grid that were not directly calculated.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.is_converged-Tuple{GravityToolsNext.ConvergenceInfo}","page":"API","title":"GravityToolsNext.is_converged","text":"is_converged(info) -> Bool\n\nChecks all keys present in info.thresholds. If a required metric is NaN, convergence fails.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.is_converged_by-Tuple{GravityToolsNext.ConvergenceInfo, Vararg{Symbol}}","page":"API","title":"GravityToolsNext.is_converged_by","text":"is_converged_by(info, keys...) -> Bool\n\nChecks convergence only for the specified keys. Metrics that are not finite are ignored for the decision.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.is_debug-Tuple{LoggingOptions}","page":"API","title":"GravityToolsNext.is_debug","text":"is_debug(l::LoggingOptions) -> Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.is_info-Tuple{LoggingOptions}","page":"API","title":"GravityToolsNext.is_info","text":"is_info(l::LoggingOptions) -> Bool\n\nTreats :debug as informational as well (superset).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.is_silent-Tuple{LoggingOptions}","page":"API","title":"GravityToolsNext.is_silent","text":"is_silent(l::LoggingOptions) -> Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.is_warn-Tuple{LoggingOptions}","page":"API","title":"GravityToolsNext.is_warn","text":"is_warn(l::LoggingOptions) -> Bool\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.linspace-Tuple{GridAxis}","page":"API","title":"GravityToolsNext.linspace","text":"linspace(ax)\n\nReturn the linear parameterization for an axis:\n\nFor LinAxis, this equals the physical coordinates.\nFor LogAxis, this is uniform in log10(|x|).\nFor ExplicitAxis, returns a copy of the stored values.\n\nThe result is a copy (safe to mutate by the caller).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.lpad_display-Tuple{AbstractString, Integer}","page":"API","title":"GravityToolsNext.lpad_display","text":"lpad_display(s, w) -> String\n\nPad string s on the left (using display width via Unicode.textwidth) to width w. Returns a new String. If s already fits, returns String(s) unchanged.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.make_accessor-Tuple{Any}","page":"API","title":"GravityToolsNext.make_accessor","text":"make_accessor(spec) -> (label::String, getter::Function, key)\n\nCreate an accessor triple from a column spec. Supported forms:\n\n:field — direct field access, label \"field\", key :field\n\"a.b\" — nested path by dots, label \"a.b\", key \"a.b\"\n(:a, :b) / Vector{Symbol} — nested path, label \"a.b\", key \"a.b\"\nlabel => path_or_function — custom header; right side can be a function (row)->val or a path-like spec as above. key is the label.\nFunction — use function both as getter and as key, label \"(f)\".\n\nThrows ArgumentError for unsupported types.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.materialize-Tuple{SampledPrior}","page":"API","title":"GravityToolsNext.materialize","text":"materialize(pr::SampledPrior; n_max=4096) -> GridPrior\n\nBuild (and cache) a GridPrior via KDE of the samples. Subsequent calls reuse the cache. n_max is an upper bound on the KDE output grid size (the actual size is controlled by KernelDensity.jl).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.materialize_job-Tuple{TempoRunSettings}","page":"API","title":"GravityToolsNext.materialize_job","text":"materialize_job(s::TempoRunSettings) -> MaterializedJob\n\nCreate a reproducible run workspace according to s.workspace and stage inputs. The returned MaterializedJob stores the original settings and the realized filesystem layout and paths.\n\nSemantics\n\nwork_mode:\n:inplace — use paths.work_dir as job_root.\n:jobdir  — create or reuse a subdirectory inside paths.work_dir.\noverwrite (when the target jobdir already exists):\n:error  — throw;\n:reuse  — use as-is (no cleanup here; see cleanup_before_run);\n:unique — create a suffixed sibling (…-001, …-002);\n:clean  — purge contents and use the same directory.\nlayout:\n:flat  — input_dir = output_dir = job_root;\n:split — create input/, output/, and tmp/ (or temp_dir).\ncleanup_before_run:\nif tmp_dir != job_root — empty only tmp_dir;\notherwise — remove typical TEMPO byproducts from job_root.\n\nStaging\n\nTIM: symlink when link_tim=true (fallback to copy); no-op if already in place.\nPAR: copy snapshot when snapshot_par=true or the source is outside job_root.\n\nNote: engine will be invoked from the chosen CWD with relative file names.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.par_input_path-Tuple{TempoRunSettings}","page":"API","title":"GravityToolsNext.par_input_path","text":"par_input_path(s::TempoRunSettings) -> String\n\nAbsolute path to the input .par file, resolving a relative name against s.paths.work_dir.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.parallel_precalculate_2DGrid!-Tuple{AdaptiveRefinement2DGrid, Any, Any}","page":"API","title":"GravityToolsNext.parallel_precalculate_2DGrid!","text":"parallel_precalculate_2DGrid!(grid, target_function, params_function!)\n\nFill the grid with values using parallel processing.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.parallel_refine_2DGrid-Tuple{AdaptiveRefinement2DGrid, Any, Any}","page":"API","title":"GravityToolsNext.parallel_refine_2DGrid","text":"parallel_refine_2DGrid(grid, target_function, params_function!)\n\nRefine the grid by one level using parallel processing.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.param_index-Tuple{AbstractVector{TempoParameter}, Union{AbstractString, Symbol}}","page":"API","title":"GravityToolsNext.param_index","text":"param_index(params, name) -> Union{Int,Nothing}\n\nFind index of parameter by name (compared with p.name_symbol). Returns nothing if missing.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.params_as_vector-Tuple{TempoParFile}","page":"API","title":"GravityToolsNext.params_as_vector","text":"params_as_vector(pf) -> Vector{TempoParameter}\n\nReturn parameters in the stored order; skips names that may have been removed from params.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.parse_basic_tempo_output-Tuple{String, Type{Tempo2}}","page":"API","title":"GravityToolsNext.parse_basic_tempo_output","text":"parse_basic_tempo_output(section::String, ::Type{Tempo2})\n    -> (BasicTempoOutput | nothing, TempoOutputError)\n\nParse RMS, chi-square, number of points/params, and offset block.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.parse_fit_parameters-Tuple{String, Type{Tempo2}}","page":"API","title":"GravityToolsNext.parse_fit_parameters","text":"parse_fit_parameters(section::String, ::Type{Tempo2})\n    -> (Vector{FitParameter} | nothing, TempoOutputError)\n\nExtract the parameter table between dashed lines. If dashed separators are missing, attempt a fallback search using a header-like line.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.parse_internal_iteration_tempo_output-Tuple{String, Type{Tempo2}}","page":"API","title":"GravityToolsNext.parse_internal_iteration_tempo_output","text":"parse_internal_iteration_tempo_output(section::String, ::Type{Tempo2}) -> InternalIterationOutput\n\nParse a single iteration section:\n\ndetect known fatal errors;\nparse basic fit statistics;\nparse fit-parameter table.\n\nIf any step fails, returns an output with error set, others nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.parse_tempo_output-Tuple{String, Type{Tempo2}}","page":"API","title":"GravityToolsNext.parse_tempo_output","text":"parse_tempo_output(output::String, ::Type{Tempo2}) -> Vector{InternalIterationOutput}\n\nSplit full TEMPO2 output into iteration sections, keeping any preamble BEFORE the first anchor as part of the FIRST section, and parse each section.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.parse_tempo_output_error-Tuple{String, Type{Tempo2}}","page":"API","title":"GravityToolsNext.parse_tempo_output_error","text":"parse_tempo_output_error(section::String, ::Type{Tempo2}) -> TempoOutputError\n\nScan a section for known error patterns (lost connection, segfaults, panic, etc.).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.parse_tempo_parameter_field-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.parse_tempo_parameter_field","text":"parse_tempo_parameter_field(str) -> Int64 | BigFloat | String\n\nTry Int64, then BigFloat, otherwise return String.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.pathlike_to_syms-Tuple{Any}","page":"API","title":"GravityToolsNext.pathlike_to_syms","text":"pathlike_to_syms(x) -> Vector{Symbol}\n\nNormalize a column/field path specification to a vector of symbols. Supported inputs:\n\nSymbol\nAbstractString with dots (e.g. \"stats.std\")\nTuple/Vector{Symbol}\n\nThrows ArgumentError otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.precalculate_2DGrid!-Tuple{AdaptiveRefinement2DGrid, Any, Any}","page":"API","title":"GravityToolsNext.precalculate_2DGrid!","text":"precalculate_2DGrid!(grid, target_function, params_function!)\n\nPopulate the grid with initial values before refinement, using parallel or single-core as needed.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.print_aligned_table-Tuple{Any}","page":"API","title":"GravityToolsNext.print_aligned_table","text":"print_aligned_table(data; kwargs...)\n\nConvenience overload that prints to stdout.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.print_aligned_table-Tuple{IO, AbstractDict}","page":"API","title":"GravityToolsNext.print_aligned_table","text":"print_aligned_table(io, d::AbstractDict; kwargs...)\n\nDictionary-friendly overload. Treats values as rows, and uses keys as the left-most \"name\" column. Keys are converted to strings. Supports the same options as the vector overload, plus:\n\nname_label: header text for the name column (default: \"key\").\nsort_by = :__key__ sorts by dictionary keys (name column). Use nothing to keep insertion order, or any other valid sort_by (applied to values).\n\nAll other options (cols, formats, renderers, aligns, header_align, order) are forwarded.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.print_aligned_table-Tuple{IO, AbstractVector}","page":"API","title":"GravityToolsNext.print_aligned_table","text":"print_aligned_table(io, rows;\n    namecol, cols;\n    indent=0, header=true,\n    formats=Dict(), renderers=Dict(), aligns=Dict(),\n    header_align=:auto,\n    sort_by=nothing, order=:asc,\n    names_override=nothing, name_label_override=nothing)\n\nFlexible, allocation-friendly table printer for a vector of rows (typically structs).\n\nParameters\n\nnamecol — how to obtain the left-most \"name\" column from each row. One of: Symbol, dotted String (e.g. \"stats.std\"), tuple (:stats,:std), or a function (row)->name.\ncols — collection of column specs (right-hand side of the table). Each element can be:\nSymbol — field name\ndotted String — nested path (e.g. \"stats.std\")\ntuple / Vector{Symbol} — nested path\nlabel => getter — custom label with either a function or a path-like spec\nFunction — getter; label becomes \"(f)\"\nformats::Dict — optional number formats (Printf) per-column, keyed by the column key (as returned by make_accessor). Defaults to \"%10.6f\".\nrenderers::Dict — optional custom cell renderers per-column: v -> AbstractString. Takes precedence over formats.\naligns::Dict — optional alignment per-column: :left | :right | :center. Defaults to :right for numeric columns, :center for Bool, otherwise :left.\nheader_align — alignment for header labels:\n:auto (default): center for right/center columns, left for text columns\n:left, :center, or :match (same as data alignment)\nSorting: sort_by can be nothing (no sorting), :__name__ (sort by resolved names), any path-like spec, or a function. order is :asc or :desc.\nName overrides: names_override::Vector{String} can be used to directly supply the row names (useful when the name is not obtainable from the row itself). name_label_override sets the header text for the name column.\n\nExamples\n\nprint_aligned_table(stdout, rows;\n    namecol = :backend,\n    cols = (\n        :efac, :equad, \"stats.std\", \"chisqr\" => (:stats, :chisqr),\n        :success, :converged,\n    ),\n    formats = Dict(\n        :efac => \"%10.6f\", :equad => \"%10.4f\", \"stats.std\" => \"%10.6f\",\n        \"chisqr\" => \"%10.4f\"\n    ),\n    renderers = Dict(\n        :success => x -> (x ? \"✓\" : \"✗\"),\n        :converged => x -> (x ? \"✓\" : \"✗\"),\n    ),\n    aligns = Dict(:success=>:center, :converged=>:center),\n    header_align = :auto,\n    sort_by = :ad_objective, order = :asc,\n)\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.print_white_noise_fit_report!-Tuple{IO, AbstractString, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vararg{Float64, 4}}","page":"API","title":"GravityToolsNext.print_white_noise_fit_report!","text":"print_white_noise_fit_report!(\n    io::IO,\n    backend::AbstractString,\n    residuals::Vector{Float64},\n    uncertainties_orig::Vector{Float64},\n    uncertainties_tr::Vector{Float64},\n    residuals_norm::Vector{Float64},\n    residuals_shifted_norm::Vector{Float64},\n    efac::Float64, equad::Float64, offset::Float64, ad_objective::Float64;\n    n_toas::Int = length(residuals),\n    sections::AbstractSet{Symbol} = Set([\n        :header, :residuals, :uncertainties_orig, :uncertainties_tr, :normalized, :shifted_normalized, :chi2, :footer\n    ]),\n)\n\nMutating workspace variant:\n\nOverwrites uncertainties_tr, residuals_norm, residuals_shifted_norm.\nComputes only what is required by sections.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.print_white_noise_fit_report-Tuple{IO, AbstractString, Vector{Float64}, Vector{Float64}, Vararg{Float64, 4}}","page":"API","title":"GravityToolsNext.print_white_noise_fit_report","text":"print_white_noise_fit_report(\n    io::IO,\n    backend, residuals, uncertainties_orig,\n    efac, equad, offset, ad_objective;\n    sections=Set([...])\n)\n\nNon-mutating convenience: allocates local work buffers and calls print_white_noise_fit_report!.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.prior_cdf-Tuple{AbstractPriorSpec, Real}","page":"API","title":"GravityToolsNext.prior_cdf","text":"prior_cdf(pr, x::Real) -> Float64\n\nPrior cumulative distribution function at x. Optional but recommended for diagnostics/plots.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.prior_cdf-Tuple{GridPrior, Real}","page":"API","title":"GravityToolsNext.prior_cdf","text":"prior_cdf(pr::GridPrior, x::Real) -> Float64\n\nEvaluate the tabulated CDF with linear interpolation. Returns cdf[1] if x < x[1] and cdf[end] if x > x[end].\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.prior_invcdf-Tuple{AbstractPriorSpec, Real}","page":"API","title":"GravityToolsNext.prior_invcdf","text":"prior_invcdf(pr, u::Real) -> Float64\n\nInverse-CDF mapping u ∈ (0,1) to θ. Concrete prior types must implement this scalar method. The caller may clamp u into (0,1) if appropriate.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.prior_invcdf-Tuple{GridPrior, Real}","page":"API","title":"GravityToolsNext.prior_invcdf","text":"prior_invcdf(pr::GridPrior, u::Real) -> Float64\n\nInvert the tabulated CDF with linear interpolation. u is clamped into [cdf[1], cdf[end]] before inversion.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.prior_logpdf-Tuple{AbstractPriorSpec, Real}","page":"API","title":"GravityToolsNext.prior_logpdf","text":"prior_logpdf(pr, x::Real) -> Float64\n\nLog prior density at x. Optional but recommended for diagnostics/plots.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.prior_pdf-Tuple{AbstractPriorSpec, Real}","page":"API","title":"GravityToolsNext.prior_pdf","text":"prior_pdf(pr, x::Real) -> Float64\n\nPrior density at x. Optional but recommended for diagnostics/plots.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.prior_support-Tuple{AbstractPriorSpec}","page":"API","title":"GravityToolsNext.prior_support","text":"prior_support(pr) -> (xmin::Float64, xmax::Float64)\n\nOptional domain hint used for plotting/clamping; override when available.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.prior_tail_mass-Tuple{AbstractPriorSpec, Real, Real}","page":"API","title":"GravityToolsNext.prior_tail_mass","text":"prior_tail_mass(pr, lo, hi) -> Float64\n\nReturn prior mass outside [lo, hi]: CDF(lo) + (1 - CDF(hi)).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.read_par_file!-Tuple{TempoParFile}","page":"API","title":"GravityToolsNext.read_par_file!","text":"read_par_file!(par_file::TempoParFile) -> TempoParFile\n\nReads and parses the .par file on disk.\n\nIgnores blank lines and comment lines beginning with C, c, or # (after trimming).\nClears and fills params and order in-place.\nIf a parameter appears multiple times, the first occurrence defines the position in order, subsequent occurrences update the value in-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.read_par_file-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.read_par_file","text":"read_par_file(path::AbstractString) -> TempoParFile\n\nReads a .par file from the given path and returns a TempoParFile.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.read_prior_samples-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.read_prior_samples","text":"read_prior_samples(path; column=1, comment=\"#\", delim=nothing, transform=identity) -> Vector{Float64}\n\nRead numeric samples from a text file to build an empirical prior.\n\nSkips empty lines and lines starting with comment.\nSplits each line by delim (default: regex for commas/whitespace).\ncolumn can be an Int (1-based) or :auto to pick the first parseable number on each line.\ntransform is applied to each parsed value (e.g., to convert units or apply a sign flip).\n\nReturns a vector of finite Float64 values. Errors if fewer than 2 values are found.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.read_residual_file-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.read_residual_file","text":"read_residual_file(path::AbstractString) -> Vector{TempoResidualEntry}\n\nReads residuals.dat (or similar) with 5 columns: time  signal  residual  residual_tn  uncertainty. Signal, residuals, and uncertainty are converted to microseconds (×1e6).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.read_tim_file-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.read_tim_file","text":"read_tim_file(path::AbstractString) -> Vector{TimTOAEntry}\n\nReads a .tim file, skipping comment/blank lines, preserving original line numbers, and assuming the first two non-comment lines are header/meta.\n\nNotes:\n\nExpects data lines with (at least) 4 tokens where the 2nd/3rd/4th tokens are freq, MJD, uncertainty respectively (compatible with your current format).\nBackend is taken from the -be <name> flag if present; otherwise \"unknown\".\nUnparseable lines are skipped with a warning.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.read_tim_file_safe-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.read_tim_file_safe","text":"read_tim_file_safe(path::AbstractString) -> Union{Nothing, Vector{TimTOAEntry}}\n\nSafe wrapper around read_tim_file. Returns nothing if the file does not exist or if any I/O/parsing exception is thrown while reading the file. Per-line parsing issues are still logged by read_tim_file as warnings.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.refine-Tuple{AdaptiveRefinement2DGrid}","page":"API","title":"GravityToolsNext.refine","text":"refine(grid::AdaptiveRefinement2DGrid)\n\nReturn a refined version of the grid with doubled resolution.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.refine-Tuple{GridAxis, Integer}","page":"API","title":"GravityToolsNext.refine","text":"refine(ax::GridAxis, levels::Integer) -> GridAxis\n\nApply refine repeatedly levels times.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.refine-Tuple{LinAxis}","page":"API","title":"GravityToolsNext.refine","text":"refine(ax::GridAxis) -> GridAxis\n\nRefine a 1D axis by inserting midpoints to reach 2N-1 nodes.\n\nLinAxis  : midpoints in physical space on [min, max].\nLogAxis  : midpoints uniform in log10(|x|) (geometric means in physical space).\nExplicitAxis : midpoints in physical space between consecutive user nodes.\n\nReturns a new axis; the original is unchanged.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.refine-Union{Tuple{Dict{Symbol, Matrix{T}}}, Tuple{T}} where T","page":"API","title":"GravityToolsNext.refine","text":"refine(dict::Dict{Symbol,Matrix})\n\nRefine each matrix in a dictionary of matrices.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.refine-Union{Tuple{Matrix{T}}, Tuple{T}} where T","page":"API","title":"GravityToolsNext.refine","text":"refine(arr::Matrix)\n\nRefine a matrix by doubling its resolution, inserting -1 in new positions.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.refine_2DGrid-Tuple{AdaptiveRefinement2DGrid, Any, Any}","page":"API","title":"GravityToolsNext.refine_2DGrid","text":"refine_2DGrid(grid, target_function, params_function!)\n\nRefine the grid by one level, using parallel or single-core as requested.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.refined_index-Tuple{Int64}","page":"API","title":"GravityToolsNext.refined_index","text":"refined_index(i_cell)\n\nReturn the index of the refined grid corresponding to the coarse cell index.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.rpad_display-Tuple{AbstractString, Integer}","page":"API","title":"GravityToolsNext.rpad_display","text":"rpad_display(s, w) -> String\n\nPad string s on the right (using display width via Unicode.textwidth) to width w. Returns a new String. If s already fits, returns String(s) unchanged.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.run_task-Tuple{BasicTempoTask}","page":"API","title":"GravityToolsNext.run_task","text":"run_task(task::BasicTempoTask) -> GeneralTempoResult\n\nRun TEMPO/TEMPO2 using task.settings, parse iteration-wise outputs, attach residual/TIM-derived statistics, optionally perform white-noise fitting, and return an aggregated GeneralTempoResult.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.run_task-Tuple{MultiPointTask}","page":"API","title":"GravityToolsNext.run_task","text":"run_task(task::MultiPointTask)\n\nEntry point for multi-point workflows. Define as needed for your project.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.run_task-Tuple{PriorMarginalizedTempoTask}","page":"API","title":"GravityToolsNext.run_task","text":"run_task(task::PriorMarginalizedTempoTask) -> GeneralTempoResult\n\nExecute the prior-marginalized task: build θ grid, run/supply node results, and assemble the aggregated GeneralTempoResult.\n\nIf settings.exec_options.on_error == :stop, the execution stops at the first failing node (detected by _check_nodes_for_error) and returns that node's GeneralTempoResult annotated by _bad_prior_result with :prior_mode => :stopped_on_error.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.run_task-Tuple{SingleTempoTask}","page":"API","title":"GravityToolsNext.run_task","text":"run_task(task::SingleTempoTask) -> GeneralTempoResult\n\nExecute the task and return a unified result. Every concrete SingleTempoTask must provide a method.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.run_tempo_parsed-Tuple{TempoRunSettings}","page":"API","title":"GravityToolsNext.run_tempo_parsed","text":"run_tempo_parsed(settings::TempoRunSettings) :: TempoRunOutput\n\nMaterialize the workspace, run TEMPO/TEMPO2 with relative paths, parse stdout into iteration records, and assemble RunArtifacts. No post-run deletion is performed here; call cleanup_run! from task-level code after reading the artifacts.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.run_tempo_raw-Tuple{MaterializedJob}","page":"API","title":"GravityToolsNext.run_tempo_raw","text":"run_tempo_raw(job::MaterializedJob) -> (stdout::String, stderr::String, exit_code::Int)\n\nInvoke TEMPO/TEMPO2 from the job's working directory (CWD) using relative paths (-f <init.par> <tim> -outpar <name.par>). Returns captured stdout/stderr and a coarse exit code: returns 0 on normal completion, 1 on Julia-side exception.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.run_tempo_raw-Tuple{TempoRunSettings}","page":"API","title":"GravityToolsNext.run_tempo_raw","text":"run_tempo_raw(settings::TempoRunSettings)\n\nERROR: This method is disabled. Materialize first: job = materialize_job(settings) and then call run_tempo_raw(job). Or use run_tempo_parsed(settings).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.sanitize_name-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.sanitize_name","text":"sanitize_name(s) -> String\n\nMake a string safe for filesystem by keeping only alphanumerics plus ._=-+, replacing the rest with _.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.set_flag!-Tuple{TempoParFile, Union{AbstractString, Symbol}, Int64}","page":"API","title":"GravityToolsNext.set_flag!","text":"set_flag!(pf, name, flag) -> TempoParFile\n\nSet the fit-flag for an existing parameter. Throws if missing.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.single_core_precalculate_2DGrid!-Tuple{AdaptiveRefinement2DGrid, Any, Any}","page":"API","title":"GravityToolsNext.single_core_precalculate_2DGrid!","text":"single_core_precalculate_2DGrid!(grid, target_function, params_function!)\n\nFill the grid with values using a single core.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.single_core_refine_2DGrid-Tuple{AdaptiveRefinement2DGrid, Any, Any}","page":"API","title":"GravityToolsNext.single_core_refine_2DGrid","text":"single_core_refine_2DGrid(grid, target_function, params_function!)\n\nRefine the grid by one level using a single core.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.task_stage_inputs!-Tuple{SingleTempoTask, AbstractString}","page":"API","title":"GravityToolsNext.task_stage_inputs!","text":"task_stage_inputs!(task::SingleTempoTask, dest_dir::AbstractString) -> Nothing\n\nStage/copy any task-specific input artifacts into dest_dir so that the task can run there using name-only paths. Default implementation does nothing.\n\nWrappers like prior-marginalization should call this before cloning a task with a new work_dir.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.task_with_overrides-Tuple{BasicTempoTask, AbstractVector{TempoParameter}}","page":"API","title":"GravityToolsNext.task_with_overrides","text":"task_with_overrides(task::BasicTempoTask, overrides; work_dir) :: BasicTempoTask\n\nClone the task with a new work_dir and a list of TempoParameter overrides that will be upserted into the underlying TempoRunSettings.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.task_with_overrides-Union{Tuple{T}, Tuple{T, AbstractVector{TempoParameter}}} where T<:SingleTempoTask","page":"API","title":"GravityToolsNext.task_with_overrides","text":"task_with_overrides(task::T, overrides::AbstractVector{TempoParameter};\n                    work_dir::AbstractString) -> T where {T<:SingleTempoTask}\n\nReturn a copy of task (same concrete type) with additional/overriding parameters overrides and a reassigned working directory work_dir.\n\nImplementations must merge overrides with any existing parameter overrides present in the task's settings, giving precedence to the new ones.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.task_with_param-Union{Tuple{T}, Tuple{T, Symbol, Float64, Int64}} where T<:SingleTempoTask","page":"API","title":"GravityToolsNext.task_with_param","text":"task_with_param(task::T, name::Symbol, value::Float64, flag::Int;\n                work_dir::AbstractString) -> T where {T<:SingleTempoTask}\n\nConvenience wrapper over task_with_overrides for a single parameter. By default constructs TP(String(name), value; flag=flag) and delegates. Usually there is no need to override this method.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.task_workdir-Tuple{BasicTempoTask}","page":"API","title":"GravityToolsNext.task_workdir","text":"task_workdir(task::BasicTempoTask) :: AbstractString\n\nReturn the working directory where this BasicTempoTask will execute.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.task_workdir-Tuple{SingleTempoTask}","page":"API","title":"GravityToolsNext.task_workdir","text":"task_workdir(task::SingleTempoTask) -> AbstractString\n\nReturn the working directory where the task runs / writes results. Used by higher-level wrappers to organize per-node subdirectories.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.tempo_flag-Tuple{Symbol}","page":"API","title":"GravityToolsNext.tempo_flag","text":"tempo_flag(pin_mode::Symbol) -> Int\n\nMap a high-level pin mode to the TEMPO flag:\n\n:force → -1  (force this value; do not recompute even if derived)\n:fixed → 0   (set, but do not fit)\n:fit   → 1   (fit this parameter)\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.tim_input_path-Tuple{TempoRunSettings}","page":"API","title":"GravityToolsNext.tim_input_path","text":"tim_input_path(s::TempoRunSettings) -> String\n\nAbsolute path to the input .tim file, resolving a relative name against s.paths.work_dir.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.transform_uncertainties!-Tuple{Vector{Float64}, Vector{Float64}, Float64, Float64}","page":"API","title":"GravityToolsNext.transform_uncertainties!","text":"transform_uncertainties!(uncertainties_tr, uncertainties_orig, efac, equad)\n    -> uncertainties_tr\n\nIn-place transformation: σ' = sqrt((efac * σ)^2 + equad^2). Mutates the first argument.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.transform_uncertainties-Tuple{Vector{Float64}, Float64, Float64}","page":"API","title":"GravityToolsNext.transform_uncertainties","text":"Out-of-place variant of transform_uncertainties!.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.update_par_file!-Tuple{TempoParFile}","page":"API","title":"GravityToolsNext.update_par_file!","text":"update_par_file!(pf::TempoParFile; ...; prefer_overrides=true) -> TempoParFile\n\nApply overrides and optionally set NITS/GAIN/START/FINISH with a clear precedence rule.\n\ncouple_f1_to_ddot::Bool=false — if true and DDOT is overridden (while F1 is not), auto-adjust F1 using ΔF1 ≈ -F0·ΔDDOT/D.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.update_points_to_calculate!-Tuple{Vector{Tuple{Int64, Int64}}, AdaptiveRefinement2DGrid, AdaptiveRefinement2DGrid, Any}","page":"API","title":"GravityToolsNext.update_points_to_calculate!","text":"update_points_to_calculate!(points_to_calculate, grid, grid_refined, refined_points_status)\n\nUpdate the list of points to calculate for refinement (parallel version).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.update_points_to_calculate!-Tuple{Vector{Tuple{Int64, Int64}}, Int64, Int64, AdaptiveRefinement2DGrid, AdaptiveRefinement2DGrid, Any}","page":"API","title":"GravityToolsNext.update_points_to_calculate!","text":"update_points_to_calculate!(points_to_calculate, i_ref_init, j_ref_init, grid, grid_refined, refined_points_status)\n\nUpdate the list of points to calculate for a given refined point (parallel version).\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.upsert_param!-Tuple{TempoParFile, TempoParameter}","page":"API","title":"GravityToolsNext.upsert_param!","text":"upsert_param!(pf, p) -> TempoParFile\n\nInsert or replace parameter p by name, and ensure it is present in order.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.upsert_param!-Union{Tuple{T}, Tuple{Vector{T}, T}} where T<:TempoParameter","page":"API","title":"GravityToolsNext.upsert_param!","text":"upsert_param!(params, p) -> Vector{TempoParameter}\n\nUpdate by name or append if not present. Keeps order. Mutates params.\n\nRules:\n\nIf parameter with this name is new → push p.\nIf exists → replace value/flag intelligently:\nIf p.value === nothing, keep the old value.\nIf p.flag === nothing, keep the old flag.\nOtherwise take the provided values.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.upsert_params!-Tuple{TempoParFile, AbstractVector{TempoParameter}}","page":"API","title":"GravityToolsNext.upsert_params!","text":"upsert_params!(pf, ps) -> TempoParFile\n\nApply upsert_param! for each p in ps. If p.value === nothing, treat it as a flag-only update.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.upsert_params!-Union{Tuple{T}, Tuple{Vector{T}, AbstractVector{T}}} where T<:TempoParameter","page":"API","title":"GravityToolsNext.upsert_params!","text":"upsert_params!(params, new_params) -> Vector{TempoParameter}\n\nApply upsert_param! for each element of new_params. Order of new elements is preserved.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.validate-Tuple{AbstractTempoVersion}","page":"API","title":"GravityToolsNext.validate","text":"validate(v::AbstractTempoVersion) -> Bool\n\nCheck that data directory exists and the executable is available (or at least named). Returns true if OK, otherwise throws.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.validate-Tuple{TempoRunSettings}","page":"API","title":"GravityToolsNext.validate","text":"validate(s::TempoRunSettings) -> Bool\n\nAlias for [validate_inputs_exist] — quick pre-materialization check that input .par/.tim exist relative to work_dir and that par_output is a bare file name. Does not create directories.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.validate_inputs_exist-Tuple{TempoRunSettings}","page":"API","title":"GravityToolsNext.validate_inputs_exist","text":"validate_inputs_exist(s::TempoRunSettings) -> Bool\n\nValidate inputs before materialization:\n\nchecks that par_input and tim_input exist relative to work_dir;\nensures par_output is a file name (no directories).\n\nDoes not create directories. Returns true if valid, otherwise throws.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.validate_prior-Tuple{GridPrior}","page":"API","title":"GravityToolsNext.validate_prior","text":"validate_prior(pr::GridPrior; atol_mass=1e-3) -> Bool\n\nValidate monotonicity and normalization of a GridPrior. Throws an error with a diagnostic message if invalid.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.weighted_kurtosis-Tuple{Vector{Float64}}","page":"API","title":"GravityToolsNext.weighted_kurtosis","text":"weighted_kurtosis(res [, unc]) -> (excess_g2, se_g2)\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.weighted_mean-Tuple{Vector{Float64}}","page":"API","title":"GravityToolsNext.weighted_mean","text":"weighted_mean(res) -> (μ, se_μ)\nweighted_mean(res, unc) -> (μ_w, se_μ)\n\nUnweighted fast path avoids allocating ones(N). Weighted uses w = 1/unc^2. Standard errors follow the same conventions as in the legacy printout.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.weighted_mean_invvar-Tuple{Vector{Float64}, Vector{Float64}}","page":"API","title":"GravityToolsNext.weighted_mean_invvar","text":"weighted_mean_invvar(residuals, uncertainties_tr) -> (μ_w, se_μ)\n\nInverse-variance weighted mean with w = 1/σ′^2 without allocations. Skips entries with non-finite residuals/σ′ or σ′ ≤ 0. Returns (NaN, NaN) if no valid points.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.weighted_rms-Tuple{Vector{Float64}}","page":"API","title":"GravityToolsNext.weighted_rms","text":"weighted_rms(res [, unc]) -> (rms, se_rms)\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.weighted_skewness-Tuple{Vector{Float64}}","page":"API","title":"GravityToolsNext.weighted_skewness","text":"weighted_skewness(res [, unc]) -> (g1, se_g1)\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.weighted_std-Tuple{Vector{Float64}}","page":"API","title":"GravityToolsNext.weighted_std","text":"weighted_std(res) / weighted_std(res, unc) -> (σ, se_σ)\n\nCentered at (weighted) mean. Unweighted uses population σ (divide by N), to match the diagnostic behavior you had.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.with_upserted_params-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T<:TempoParameter","page":"API","title":"GravityToolsNext.with_upserted_params","text":"with_upserted_params(params, new_params) -> Vector{TempoParameter}\n\nNon-mutating version of upsert_params!.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.without_params-Union{Tuple{T}, Tuple{AbstractVector{T}, Any}} where T<:TempoParameter","page":"API","title":"GravityToolsNext.without_params","text":"without_params(params, names) -> Vector{TempoParameter}\n\nNon-mutating bulk deletion.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.write_node_metadata-Tuple{AbstractString}","page":"API","title":"GravityToolsNext.write_node_metadata","text":"write_node_metadata(path; meta...) -> Nothing\n\nWrite a simple key: value metadata file at path (e.g., \"node_meta.txt\").\n\nReal values are formatted via format_short.\nAbstractVector{<:Real} values are comma-joined with each element formatted via format_short.\nOther vectors are comma-joined via string.\nOther scalars are stringified.\n\n\n\n\n\n","category":"method"},{"location":"api/#GravityToolsNext.write_par_file!-Tuple{TempoParFile}","page":"API","title":"GravityToolsNext.write_par_file!","text":"write_par_file!(par_file::TempoParFile) -> TempoParFile\n\nWrites parameters to par_file.path, preserving the order defined in order. If par_file.dir does not exist, it will be created.\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"tasks/#Tasks","page":"Tasks","title":"Tasks","text":"","category":"section"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"Higher-level orchestration built on top of the runner.","category":"page"},{"location":"tasks/#Basic-task","page":"Tasks","title":"Basic task","text":"","category":"section"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"Prepares settings\nExecutes run and parses outputs\nOptionally stages inputs into a node directory for batch sweeps","category":"page"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"Example skeleton:","category":"page"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"# using GravityToolsNext\n# t = BasicTempoTask(settings)\n# res = run_task(t)","category":"page"},{"location":"tasks/#Parameter-sweeps-and-adaptive-grids","page":"Tasks","title":"Parameter sweeps and adaptive grids","text":"","category":"section"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"MultiPointTasks enable structured exploration (WIP docs)","category":"page"},{"location":"settings/#Settings","page":"Settings","title":"Settings","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"This page documents the core configuration types used to run TEMPO/TEMPO2.","category":"page"},{"location":"settings/#RunPaths","page":"Settings","title":"RunPaths","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Holds paths for a TEMPO run.","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"work_dir::String — absolute working directory\npar_input::String — input .par file name (relative to work_dir)\ntim_input::String — input .tim file name (relative to work_dir)\npar_output::String — output .par filename (no directories)","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"Use default_par_output(par_input) to derive a default out name.","category":"page"},{"location":"settings/#EngineOptions","page":"Settings","title":"EngineOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Low-level engine configuration:","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"tempo_version::AbstractTempoVersion (Tempo() or Tempo2())\nflags::String (additional CLI flags)\nnits::Int (internal iterations ≥ 1)\ngain::Float64 (> 0)","category":"page"},{"location":"settings/#InputModifiers","page":"Settings","title":"InputModifiers","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"override_params::Vector{TempoParameter}\ntime_start::Union{Nothing,Float64}\ntime_finish::Union{Nothing,Float64}","category":"page"},{"location":"settings/#CaptureOptions","page":"Settings","title":"CaptureOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"write_output::Bool\nwrite_residuals::Bool","category":"page"},{"location":"settings/#RetentionOptions","page":"Settings","title":"RetentionOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"save_internal_iterations::Bool\nsave_residuals::Bool","category":"page"},{"location":"settings/#WhiteNoiseOptions","page":"Settings","title":"WhiteNoiseOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"enabled::Bool\nscope::Symbol (:final | :all)","category":"page"},{"location":"settings/#WorkspaceOptions","page":"Settings","title":"WorkspaceOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Runtime/materialization settings:","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"work_mode (:inplace | :jobdir)\njob_name::Union{Nothing,String}\noverwrite (:error | :overwrite | :unique)\nlayout (:flat | :split)\ntemp_dir::Union{Nothing,String}\nlink_tim::Bool, snapshot_par::Bool\nCleanup: cleanup_before_run, keep_tmp_on_success, keep_tmp_on_error\nManifest: timeout_s, write_manifest, manifest_style (:json | :toml)","category":"page"},{"location":"settings/#LoggingOptions","page":"Settings","title":"LoggingOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"verbosity (:silent | :warn | :info | :debug or 0..3)\nwith_timestamps::Bool","category":"page"},{"location":"settings/#TempoRunSettings","page":"Settings","title":"TempoRunSettings","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Top-level settings composed from the types above with a keyword constructor.","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"s = TempoRunSettings(\n    work_dir   = \"/abs/workdir\",\n    par_input  = \"a.par\",\n    tim_input  = \"a.tim\",\n    par_output = default_par_output(\"a.par\"),\n    tempo_version = Tempo2(), nits=2, gain=1.0,\n    white_noise_enabled = false,\n    work_mode = :jobdir, layout = :split,\n)","category":"page"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"This guide shows how to run a simple TEMPO/TEMPO2 job with GravityToolsNext.jl.","category":"page"},{"location":"quickstart/#Installation","page":"Quickstart","title":"Installation","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using Pkg\nPkg.add(url = \"https://github.com/AlexBatrakov/GravityToolsNext.jl\")","category":"page"},{"location":"quickstart/#Minimal-run","page":"Quickstart","title":"Minimal run","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using GravityToolsNext\n\ns = TempoRunSettings(\n    work_dir   = \"/path/to/workdir\",           # absolute path\n    par_input  = \"example.par\",                # relative to work_dir, must end with .par\n    tim_input  = \"example.tim\",                # relative to work_dir, must end with .tim\n    par_output = \"example_out.par\",            # filename only\n    tempo_version = Tempo2(),                   # or Tempo()\n)\n\n# Validate inputs (optional)\nvalidate(s)\n\n# Execute and parse\n# result = run_tempo_parsed(s)\n# show(result)","category":"page"},{"location":"quickstart/#Next-steps","page":"Quickstart","title":"Next steps","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"See Settings for all options.\nSee Runner for materialization and job layouts.\nSee Tasks for higher-level orchestration.","category":"page"},{"location":"runner/#Runner","page":"Runner","title":"Runner","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"This page explains how a run is materialized and executed.","category":"page"},{"location":"runner/#Materialization","page":"Runner","title":"Materialization","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"A job root is chosen based on WorkspaceOptions:\n:inplace: job root = work_dir\n:jobdir: job root = work_dir/<job_name> (auto-generated if missing)\nFor layout = :split, subfolders input/, output/, and tmp/ are created.\npar_input and tim_input are resolved relative to work_dir.\npar_output remains a filename-only token; the actual write path is:\njob_root/output/<par_output> for layout=:split\njob_root/<par_output> for :flat","category":"page"},{"location":"runner/#Execution","page":"Runner","title":"Execution","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"The engine is invoked in temp_dir if provided; otherwise in job root (or tmp/ for split).\nCapture options add flags (e.g., -write_residuals).","category":"page"},{"location":"runner/#Cleanup-and-retention","page":"Runner","title":"Cleanup and retention","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"Old artifacts can be cleared before run.\nTemporary directories may be kept on success or error based on options.","category":"page"},{"location":"runner/#Manifests","page":"Runner","title":"Manifests","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"A minimal manifest can be written with absolute paths of staged inputs and the resolved output path.","category":"page"},{"location":"#GravityToolsNext.jl","page":"Home","title":"GravityToolsNext.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for GravityToolsNext.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This site is built with Documenter.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url = \"https://github.com/AlexBatrakov/GravityToolsNext.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Start-here","page":"Home","title":"Start here","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Quickstart: a minimal run with TEMPO/TEMPO2\nSettings: full list of configuration types and options\nRunner: how materialization and job layouts work\nTasks: higher-level orchestration helpers","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the API reference page for docstrings and symbols.","category":"page"}]
}
