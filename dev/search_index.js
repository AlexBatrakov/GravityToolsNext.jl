var documenterSearchIndex = {"docs":
[{"location":"tasks/#Tasks","page":"Tasks","title":"Tasks","text":"","category":"section"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"Higher-level orchestration built on top of the runner.","category":"page"},{"location":"tasks/#Basic-task","page":"Tasks","title":"Basic task","text":"","category":"section"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"Prepares settings\nExecutes run and parses outputs\nOptionally stages inputs into a node directory for batch sweeps","category":"page"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"Example skeleton:","category":"page"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"# using GravityToolsNext\n# t = BasicTempoTask(settings)\n# res = run_task(t)","category":"page"},{"location":"tasks/#Parameter-sweeps-and-adaptive-grids","page":"Tasks","title":"Parameter sweeps and adaptive grids","text":"","category":"section"},{"location":"tasks/","page":"Tasks","title":"Tasks","text":"MultiPointTasks enable structured exploration (WIP docs)","category":"page"},{"location":"results/#Results-and-Diagnostics","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"How to read, compare, and diagnose results produced by Tempo tasks.","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Top-level: GeneralTempoResult — the container you get from run_task.\nIteration-level: InternalIterationResult — per TEMPO iteration outputs and stats.\nResidual statistics: raw/whitened/normalized, grouped by backend and by in-fit vs in-tim.\nWhite-noise fit: EFAC/EQUAD/offset per backend with normality diagnostics.\nCompact metrics: res.metrics for quick scoring and ranking.","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"This page uses the same types your tests and examples return, so you can copy/paste the snippets below into a REPL.","category":"page"},{"location":"results/#GeneralTempoResult","page":"Results and Diagnostics","title":"GeneralTempoResult","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"The top-level container with everything you usually want after a run.","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Key properties:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"res.iterations::Vector{InternalIterationResult} — all iterations, in order\nres.final — alias of the last iteration (res.iterations[end])\nres.last_successful — last iteration with no engine/parse error and computed stats (or nothing)\nres.success::Bool and res.status::Symbol — quick verdict and reason\nres.convergence — summary across iterations (wrms_tn and chi2 deltas)\nres.metrics::Dict{Symbol,Float64} — small set of scalar numbers for ranking/plots\nres.param_estimates::Dict{Symbol, (value, uncertainty)} — final fit parameters\nres.par_file_final::Union{TempoParFile,Nothing} — the output par-file if available\nres.subresults — nested results (e.g., nodes, grid cells) when a task runs many jobs\nres.metadata::Dict{Symbol,Any} — timings, paths, seeds, policies, etc.","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Convenience fields for quick access:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"res.residual_stats — alias to res.final.stats\nres.white_noise_fit — alias to res.final.white_noise_fit","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Example checks:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"res.success          # true/false\nres.status           # :ok | :engine_failed | :parse_failed | :files_missing | :unknown\nres.final.output     # parsed TEMPO basic block and fit table\nres.final.stats      # residual statistics (see below)\nres.metrics[:wrms_fit]  # weighted RMS (fit window, whitened)","category":"page"},{"location":"results/#Compact-metrics-(res.metrics)","page":"Results and Diagnostics","title":"Compact metrics (res.metrics)","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"We compute a compact, task-agnostic set of scalars from the final iteration and convergence:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":":chi2_fit_basic — Fit chi-square reported by TEMPO (basic block)\n:wrms_fit, :wrms_tn_fit, :chi2_fit, :chi2r_fit — from residual stats (in-fit set)\n:pre_post_final — TEMPO pre/post RMS ratio for the final iteration\n:delta_wrms_tn, :delta_chi2 — absolute deltas between last two iterations (convergence)\n:ad_white_fit — global Anderson–Darling A² after a white-noise fit, if available","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"When stats include a separate in-TIM set and you enable it, these may also appear:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":":wrms_tim, :wrms_tn_tim, :chi2_tim, :chi2r_tim","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Safe lookup helper:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"using GravityToolsNext: result_metric\nwrms = result_metric(res, :wrms_fit)        # NaN if missing\nchi2 = result_metric(res, :chi2_fit)","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Tip: Use isfinite when ranking many results and fall back to NaN-aware sorting.","category":"page"},{"location":"results/#Residual-statistics","page":"Results and Diagnostics","title":"Residual statistics","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"InternalIterationResult.stats holds a ResidualStatisticsGroup with two entries:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"in_fit — statistics restricted to the fit window\nin_tim — statistics over all TOAs (may equal in_fit if there is no time window)","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Each entry has:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"all::ResidualStatistics — overall (not split by backend)\nby_backend::Dict{Symbol,ResidualStatistics} — per-backend stats","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"And each ResidualStatistics includes four views:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"raw — basic stats of residuals\ntn — basic stats of whitened residuals (after TN plugin)\nnorm_global — normalized whitened residuals centered by a global weighted mean\nnorm_local — normalized whitened residuals centered by a local weighted mean","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Quick peek:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"stats = res.residual_stats  # == res.final.stats\nshow(stats)                 # pretty, multi-section text/plain view\n\n# Pull a few numbers\nwrms_fit = stats.in_fit.all.tn.wrms\nrchi2    = stats.in_fit.all.norm_global.red_chisqr\nn_by_be  = Dict(k => v.norm_global.n for (k,v) in stats.in_fit.by_backend)","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Helpers:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"in_fit_equals_in_tim(stats_group) — tells if the same entry is reused (no time window)","category":"page"},{"location":"results/#White-noise-fit-(EFAC,-EQUAD,-offset)","page":"Results and Diagnostics","title":"White-noise fit (EFAC, EQUAD, offset)","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"When requested via settings, the final iteration may include a per-backend white-noise calibration:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"wn = res.white_noise_fit   # ::Union{WhiteNoiseFitResult,Nothing}\nwn === nothing && @info \"No white-noise fit performed\"","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"If present:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"wn.by_backend::Dict{Symbol,WhiteNoiseBackendFitResult} — parameters and diagnostics per backend\nwn.failed_backends::Vector{Symbol} — those that failed the solver or produced non-finite params\nwn.global_stats::NormalizedResidualStats — summary over concatenated normalized residuals from successful backends","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Each backend entry stores:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"efac::Float64, equad::Float64 (µs), and offset::Float64 (µs)\nad_objective::Float64 — minimized A²\nstats::NormalizedResidualStats — detailed normality metrics for the calibrated residuals\nsuccess::Bool, converged::Bool","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Printing a rich, aligned report:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"using GravityToolsNext: print_white_noise_fit_report\nfor (be, bres) in wn.by_backend\n    # Reconstruct the two vectors the report expects (residual_tn and original uncertainties)\n    # If you kept CombinedTOAEntry vectors per backend, pass them directly; otherwise skip.\n    # print_white_noise_fit_report(be, residuals_tn, uncertainties_orig, bres.efac, bres.equad, bres.offset, bres.ad_objective)\nend\n\n# Or quickly inspect the global stats\nshow(wn.global_stats)","category":"page"},{"location":"results/#Parameter-estimates","page":"Results and Diagnostics","title":"Parameter estimates","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"The final fit table is summarized into res.param_estimates::Dict{Symbol,NamedTuple} with (value, uncertainty) for each parameter that has finite values:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"est = res.param_estimates\nget(est, :F0, (value=NaN, uncertainty=NaN))","category":"page"},{"location":"results/#Success-and-convergence","page":"Results and Diagnostics","title":"Success and convergence","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"res.success — by default, mirrors final iteration error: !iserror(res.final.output.error)\nres.convergence — contains fields with deltas and a converged::Bool flag summarizing the path","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"You can build your own criteria by combining res.metrics and res.convergence.","category":"page"},{"location":"results/#Working-with-nested-results","page":"Results and Diagnostics","title":"Working with nested results","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Tasks that execute multiple jobs (prior marginalization, adaptive grid) return a parent GeneralTempoResult with res.subresults::Vector{GeneralTempoResult} and a tag res.subresult_type (e.g., :node or :grid). Traverse or aggregate using the same fields and helpers described above:","category":"page"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"parent = res\nfor child in parent.subresults\n    @info \"child wrms\" result_metric(child, :wrms_fit)\nend","category":"page"},{"location":"results/#Troubleshooting","page":"Results and Diagnostics","title":"Troubleshooting","text":"","category":"section"},{"location":"results/","page":"Results and Diagnostics","title":"Results and Diagnostics","text":"Missing metrics: use result_metric(res, key) which returns NaN if absent.\nNo time window: expect res.residual_stats.in_fit === res.residual_stats.in_tim.\nWhite-noise failures: check wn.failed_backends and per-backend success=false entries.\nEngine crashes: inspect res.final.output.error and res.metadata[:status] if provided.","category":"page"},{"location":"settings/#Settings","page":"Settings","title":"Settings","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"This page documents the core configuration types used to run TEMPO/TEMPO2.","category":"page"},{"location":"settings/#RunPaths","page":"Settings","title":"RunPaths","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Holds paths for a TEMPO run.","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"work_dir::String — absolute working directory\npar_input::String — input .par file name (relative to work_dir)\ntim_input::String — input .tim file name (relative to work_dir)\npar_output::String — output .par filename (no directories)","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"Use default_par_output(par_input) to derive a default out name.","category":"page"},{"location":"settings/#EngineOptions","page":"Settings","title":"EngineOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Low-level engine configuration:","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"tempo_version::AbstractTempoVersion (Tempo() or Tempo2())\nflags::String (additional CLI flags)\nnits::Int (internal iterations ≥ 1)\ngain::Float64 (> 0)","category":"page"},{"location":"settings/#InputModifiers","page":"Settings","title":"InputModifiers","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"override_params::Vector{TempoParameter}\ntime_start::Union{Nothing,Float64}\ntime_finish::Union{Nothing,Float64}","category":"page"},{"location":"settings/#CaptureOptions","page":"Settings","title":"CaptureOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"write_output::Bool\nwrite_residuals::Bool","category":"page"},{"location":"settings/#RetentionOptions","page":"Settings","title":"RetentionOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"save_internal_iterations::Bool\nsave_residuals::Bool","category":"page"},{"location":"settings/#WhiteNoiseOptions","page":"Settings","title":"WhiteNoiseOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"enabled::Bool\nscope::Symbol (:final | :all)","category":"page"},{"location":"settings/#WorkspaceOptions","page":"Settings","title":"WorkspaceOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Runtime/materialization settings:","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"work_mode (:inplace | :jobdir)\njob_name::Union{Nothing,String}\noverwrite (:error | :overwrite | :unique)\nlayout (:flat | :split)\ntemp_dir::Union{Nothing,String}\nlink_tim::Bool, snapshot_par::Bool\nCleanup: cleanup_before_run, keep_tmp_on_success, keep_tmp_on_error\nManifest: timeout_s, write_manifest, manifest_style (:json | :toml)","category":"page"},{"location":"settings/#LoggingOptions","page":"Settings","title":"LoggingOptions","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"verbosity (:silent | :warn | :info | :debug or 0..3)\nwith_timestamps::Bool","category":"page"},{"location":"settings/#TempoRunSettings","page":"Settings","title":"TempoRunSettings","text":"","category":"section"},{"location":"settings/","page":"Settings","title":"Settings","text":"Top-level settings composed from the types above with a keyword constructor.","category":"page"},{"location":"settings/","page":"Settings","title":"Settings","text":"s = TempoRunSettings(\n    work_dir   = \"/abs/workdir\",\n    par_input  = \"a.par\",\n    tim_input  = \"a.tim\",\n    par_output = default_par_output(\"a.par\"),\n    tempo_version = Tempo2(), nits=2, gain=1.0,\n    white_noise_enabled = false,\n    work_mode = :jobdir, layout = :split,\n)","category":"page"},{"location":"refinement/#Refinement","page":"Refinement","title":"Refinement","text":"","category":"section"},{"location":"refinement/","page":"Refinement","title":"Refinement","text":"Control how the grid refines based on result metrics.","category":"page"},{"location":"refinement/#Units","page":"Refinement","title":"Units","text":"","category":"section"},{"location":"refinement/","page":"Refinement","title":"Refinement","text":"LocalMinimaUnit(:chi2_marginalized) — focus on local minima of a metric\nFullUnit() — dense refinement everywhere\nDiffUnit() / RelDiffUnit() — refine where absolute/relative differences are large\nContourUnit(levels) / DiffContourUnit(levels) — contour-based refinement","category":"page"},{"location":"refinement/","page":"Refinement","title":"Refinement","text":"Combine units in RefinementSettings((units...,)). The grid engine can save chosen metric names in params_to_save for later analysis.","category":"page"},{"location":"refinement/#Example","page":"Refinement","title":"Example","text":"","category":"section"},{"location":"refinement/","page":"Refinement","title":"Refinement","text":"ref = RefinementSettings((LocalMinimaUnit(:chi2_marginalized), ContourUnit([2.3, 6.17])))","category":"page"},{"location":"grid_tasks/#Adaptive-2D-Grid-Task","page":"Adaptive 2D Grid Task","title":"Adaptive 2D Grid Task","text":"","category":"section"},{"location":"grid_tasks/","page":"Adaptive 2D Grid Task","title":"Adaptive 2D Grid Task","text":"The Adaptive2DGridTask adapts a SingleTempoTask over a 2D parameter space. It manages per-point workspaces, parameter overrides, and optional result persistence.","category":"page"},{"location":"grid_tasks/#Workspace-options","page":"Adaptive 2D Grid Task","title":"Workspace options","text":"","category":"section"},{"location":"grid_tasks/","page":"Adaptive 2D Grid Task","title":"Adaptive 2D Grid Task","text":"GridWorkspaceOptions controls where grid artifacts live:","category":"page"},{"location":"grid_tasks/","page":"Adaptive 2D Grid Task","title":"Adaptive 2D Grid Task","text":"grid_root::String — base directory for the grid (absolute or relative to base task work_dir)\npoint_job_prefix::String = \"grid_points\" — subdir under grid_root for per-point job dirs\nresults_dirname::String   = \"results\" — subdir for saved per-point results (.jld2)\ninput_dirname::String     = \"input\" — optional staging location for base inputs","category":"page"},{"location":"grid_tasks/","page":"Adaptive 2D Grid Task","title":"Adaptive 2D Grid Task","text":"Tagging and staging:","category":"page"},{"location":"grid_tasks/","page":"Adaptive 2D Grid Task","title":"Adaptive 2D Grid Task","text":"tag_mode::Symbol = :with_value | :hash (controls point tag format)\nsave_results_jld2::Bool = true\nstage_inputs::Bool = true; stage_inputs_mode = :root | :subdir","category":"page"},{"location":"grid_tasks/#Example","page":"Adaptive 2D Grid Task","title":"Example","text":"","category":"section"},{"location":"grid_tasks/","page":"Adaptive 2D Grid Task","title":"Adaptive 2D Grid Task","text":"base = BasicTempoTask(TempoRunSettings(\n    work_dir=\"/abs/work\", par_input=\"a.par\", tim_input=\"a.tim\", par_output=\"a_out.par\", tempo_version=Tempo2()))\n\nx = LinAxis(:PX, 0.0, 5.0, 51)\ny = LogAxis(:PY, 1e-4, 1e0, 41)\nref = RefinementSettings(LocalMinimaUnit(:chi2_marginalized))\n\nopts = GridWorkspaceOptions(grid_root=\"scan\")\n\ngtask = Adaptive2DGridTask(base_task=base, x=x, y=y, ref_settings=ref, opts=opts)\nres = run_task(gtask)","category":"page"},{"location":"tempo_tasks_grid_prior/#Adaptive-Grid-with-Prior-Marginalization","page":"Adaptive Grid with Prior Marginalization","title":"Adaptive Grid with Prior Marginalization","text":"","category":"section"},{"location":"tempo_tasks_grid_prior/","page":"Adaptive Grid with Prior Marginalization","title":"Adaptive Grid with Prior Marginalization","text":"This advanced workflow runs PriorMarginalizedTempoTask over a 2D parameter space using Adaptive2DGridTask.","category":"page"},{"location":"tempo_tasks_grid_prior/#Example","page":"Adaptive Grid with Prior Marginalization","title":"Example","text":"","category":"section"},{"location":"tempo_tasks_grid_prior/","page":"Adaptive Grid with Prior Marginalization","title":"Adaptive Grid with Prior Marginalization","text":"base = BasicTempoTask(TempoRunSettings(\n  work_dir=\"/abs/work\", par_input=\"base.par\", tim_input=\"base.tim\", par_output=\"base_out.par\", tempo_version=Tempo2()))\n\nps = PriorMarginalizationSettings(\n  parameter=:DDOT, pin_mode=:fixed, prior=SampledPrior(\"DDOT_prior.dat\"), nodes=ClenshawCurtisNodes(4),\n  likelihood_source=:chi2_fit, representative=:prior_median,\n  save_node_results=true, exec_options=PriorExecutionOptions(mode=:chained, chain_direction=:backward, chain_snapshot_par=true)\n)\n\nprior_task = PriorMarginalizedTempoTask(base, ps)\n\nx = GridAxis(:STG_BETA0, min=-6.0, max=6.0, N=4, rule=LinRule())\ny = GridAxis(:STG_ALPHA0, min=-1e-4, max=-1e-1, N=4, rule=LogRule())\n\nref = RefinementSettings(\n  params_to_save = (:chi2_marginalized, :wrms_fit, :ad_white_fit),\n  desired_refinement_level = 0,\n  DiffContourUnit(:chi2_marginalized, from_min=true, diffs=[1.0], contours=[lvl_2sigma]),\n  LocalMinimaUnit(:chi2_marginalized, from_min=true, max=20.0, max_diff=0.1)\n)\n\nopts = GridWorkspaceOptions(grid_root=\"GRID_TEST\")\n\ngtask = Adaptive2DGridTask(base_task=prior_task, x=x, y=y, ref_settings=ref, opts=opts)\n\nresult = run_task(gtask)","category":"page"},{"location":"adaptive_grid/#Adaptive-Grid-—-Overview","page":"Adaptive Grid — Overview","title":"Adaptive Grid — Overview","text":"","category":"section"},{"location":"adaptive_grid/","page":"Adaptive Grid — Overview","title":"Adaptive Grid — Overview","text":"Use the Adaptive Grid Framework to evaluate a Tempo task over a 2D parameter space efficiently. It refines the grid where signal changes rapidly and saves per-point results when requested.","category":"page"},{"location":"adaptive_grid/","page":"Adaptive Grid — Overview","title":"Adaptive Grid — Overview","text":"Grid axes: defined via LinAxis, LogAxis, or ExplicitAxis from GridAxis rules\nRefinement strategy: configured with RefinementSettings and units like LocalMinimaUnit, FullUnit, etc.\nExecution: orchestrated by Adaptive2DGridTask, which runs your SingleTempoTask at each grid point","category":"page"},{"location":"adaptive_grid/#When-to-use","page":"Adaptive Grid — Overview","title":"When to use","text":"","category":"section"},{"location":"adaptive_grid/","page":"Adaptive Grid — Overview","title":"Adaptive Grid — Overview","text":"Parameter scans and likelihood/chi² maps\nContour extraction and coarse-to-fine searches","category":"page"},{"location":"adaptive_grid/#Minimal-pipeline","page":"Adaptive Grid — Overview","title":"Minimal pipeline","text":"","category":"section"},{"location":"adaptive_grid/","page":"Adaptive Grid — Overview","title":"Adaptive Grid — Overview","text":"using GravityToolsNext\n\n# 1) Define your base Tempo task\ns = TempoRunSettings(\n    work_dir=\"/abs/work\", par_input=\"a.par\", tim_input=\"a.tim\", par_output=\"a_out.par\", tempo_version=Tempo2())\nbase = BasicTempoTask(s)\n\n# 2) Define axes\nx = LinAxis(:PX, 1.0, 10.0, 21)\ny = LogAxis(:PY, 1e-3, 1.0, 21)\n\n# 3) Define refinement\nref = RefinementSettings(LocalMinimaUnit(:chi2_marginalized))\n\n# 4) Build and run the grid task\nopts = GridWorkspaceOptions(grid_root = \"scan\")\ngtask = Adaptive2DGridTask(base_task=base, x=x, y=y, ref_settings=ref, opts=opts)\n\nresult = run_task(gtask)","category":"page"},{"location":"prior/#Prior-Marginalization","page":"Prior Marginalization","title":"Prior Marginalization","text":"","category":"section"},{"location":"prior/","page":"Prior Marginalization","title":"Prior Marginalization","text":"Use PriorMarginalizedTempoTask to marginalize over a parameter using a prior and a node rule. It chains or independently executes a series of runs with per-node overrides, aggregating results.","category":"page"},{"location":"prior/#Settings","page":"Prior Marginalization","title":"Settings","text":"","category":"section"},{"location":"prior/","page":"Prior Marginalization","title":"Prior Marginalization","text":"PriorMarginalizationSettings controls the parameter (parameter::Symbol), the prior (AnalyticPrior | GridPrior | SampledPrior), node selection (e.g., ClenshawCurtisNodes), and execution options (PriorExecutionOptions).\nLikelihood source and representative can be customized (e.g., :chi2_fit, :prior_median).","category":"page"},{"location":"prior/#Example","page":"Prior Marginalization","title":"Example","text":"","category":"section"},{"location":"prior/","page":"Prior Marginalization","title":"Prior Marginalization","text":"base = BasicTempoTask(TempoRunSettings(\n  work_dir=\"/abs/work\", par_input=\"a.par\", tim_input=\"a.tim\", par_output=\"a_out.par\", tempo_version=Tempo2()))\n\nps = PriorMarginalizationSettings(\n  parameter=:DDOT,\n  pin_mode=:fixed,\n  prior=SampledPrior(\"DDOT_prior.dat\"),\n  nodes=ClenshawCurtisNodes(6),\n  likelihood_source=:chi2_fit,\n  representative=:prior_median,\n  save_node_results=true,\n  exec_options = PriorExecutionOptions(mode=:chained, chain_direction=:backward, chain_snapshot_par=true)\n)\n\ntask = PriorMarginalizedTempoTask(base, ps)\nres = run_task(task)","category":"page"},{"location":"runner/#Runner","page":"Runner","title":"Runner","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"This page explains how a run is materialized and executed.","category":"page"},{"location":"runner/#Materialization","page":"Runner","title":"Materialization","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"A job root is chosen based on WorkspaceOptions:\n:inplace: job root = work_dir\n:jobdir: job root = work_dir/<job_name> (auto-generated if missing)\nFor layout = :split, subfolders input/, output/, and tmp/ are created.\npar_input and tim_input are resolved relative to work_dir.\npar_output remains a filename-only token; the actual write path is:\njob_root/output/<par_output> for layout=:split\njob_root/<par_output> for :flat","category":"page"},{"location":"runner/#Execution","page":"Runner","title":"Execution","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"The engine is invoked in temp_dir if provided; otherwise in job root (or tmp/ for split).\nCapture options add flags (e.g., -write_residuals).","category":"page"},{"location":"runner/#Cleanup-and-retention","page":"Runner","title":"Cleanup and retention","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"Old artifacts can be cleared before run.\nTemporary directories may be kept on success or error based on options.","category":"page"},{"location":"runner/#Manifests","page":"Runner","title":"Manifests","text":"","category":"section"},{"location":"runner/","page":"Runner","title":"Runner","text":"A minimal manifest can be written with absolute paths of staged inputs and the resolved output path.","category":"page"},{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#Settings","page":"API","title":"Settings","text":"","category":"section"},{"location":"api/#GravityToolsNext.RunPaths","page":"API","title":"GravityToolsNext.RunPaths","text":"RunPaths\n\nHolds paths for a TEMPO run.\n\nFields\n\nwork_dir::String   : Absolute working directory for the run\npar_input::String  : Input .par file name or relative path (resolved against work_dir; absolute paths are rejected)\npar_output::String : Output .par file name (filename only; no directories)\ntim_input::String  : .tim file name or relative path (resolved against work_dir; absolute paths are rejected)\n\nNotes\n\nA keyword constructor RunPaths(; work_dir, par_input, tim_input, par_output=default_par_output(par_input)) is available.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.default_par_output","page":"API","title":"GravityToolsNext.default_par_output","text":"default_par_output(par_input::AbstractString) -> String\n\nGenerate a default output file name (no directories) by taking basename(par_input) and replacing its .par extension with *_out.par.\n\nAccepts either a bare filename or any path.\nStill enforces that the basename ends with .par (case‑insensitive).\n\n\n\n\n\n","category":"function"},{"location":"api/#GravityToolsNext.EngineOptions","page":"API","title":"GravityToolsNext.EngineOptions","text":"EngineOptions\n\nDefines low-level options for a TEMPO run.\n\nFields\n\ntempo_version::AbstractTempoVersion : Which TEMPO flavor to use\nflags::String                       : Additional command-line flags (normalized string)\nnits::Int                           : Number of internal iterations (must be ≥ 1)\ngain::Float64                       : GAIN parameter controlling convergence damping (must be > 0)\n\nNotes\n\nflags should be a single string; it is normalized (trimmed) and must not contain newlines.\ngain is validated to be strictly positive.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.InputModifiers","page":"API","title":"GravityToolsNext.InputModifiers","text":"InputModifiers\n\nDescribes transformations applied to the inputs of a TEMPO run.\n\nFields\n\noverride_params::Vector{TempoParameter} : parameters to upsert into the .par\ntime_start::Union{Nothing,Float64}      : optional lower MJD bound (inclusive)\ntime_finish::Union{Nothing,Float64}     : optional upper MJD bound (inclusive)\ncouple_f1_to_ddot::Bool                 : if true, auto-adjust F1 when DDOT is overridden (applied during materialization)\n\nNotes\n\nIf both time_start and time_finish are provided, time_start ≤ time_finish is enforced.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.CaptureOptions","page":"API","title":"GravityToolsNext.CaptureOptions","text":"CaptureOptions\n\nControls what is captured/emitted by the TEMPO engine itself (flags / process I/O).\n\nFields\n\nwrite_output::Bool    : capture stdout/stderr from the engine\nwrite_residuals::Bool : for Tempo2 uses -write_residuals (per internal iteration);                           for Tempo uses -residuals (final only)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.RetentionOptions","page":"API","title":"GravityToolsNext.RetentionOptions","text":"RetentionOptions\n\nControls what data we keep in the in-memory/result structures after a run.\n\nFields\n\nsave_internal_iterations::Bool : retain all intermediate iteration results\nsave_residuals::Bool           : retain residuals arrays inside results (can be large)\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.WhiteNoiseOptions","page":"API","title":"GravityToolsNext.WhiteNoiseOptions","text":"WhiteNoiseOptions(; enabled=false, scope=:final)\n\nOptions for white-noise analysis:\n\nenabled — toggle analysis;\nscope   — :final (last internal iteration) or :all (every internal iteration).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.WorkspaceOptions","page":"API","title":"GravityToolsNext.WorkspaceOptions","text":"WorkspaceOptions\n\nWorkspace/runtime controls for a single TEMPO run. The options are grouped by intent:\n\nLifecycle & isolation\n\nwork_mode::Symbol   : :inplace | :jobdir\n:inplace — run directly inside work_dir (job root = work_dir).\n:jobdir  — create/use a subdirectory of work_dir as an isolated job root.\njob_name::Union{Nothing,String} : subdirectory name when work_mode=:jobdir.\nIf nothing, an auto name like job-YYYYmmdd-HHMMSS-<rand> is generated.\noverwrite::Symbol   : :error | :reuse | :unique | :clean\nBehavior when the target job directory already exists (:unique appends -001, -002, ...).\n:error  — fail if exists; :reuse — use as-is; :clean — purge contents then use.\n:overwrite is accepted for backward compatibility and treated as :clean (a warning is emitted).\n\nLayout of files (inside the job root)\n\nlayout::Symbol      : :flat | :split\n:flat  — files live directly in the job root.\n:split — create input/, output/, tmp/ under the job root.\ntemp_dir::Union{Nothing,String}\nIf nothing, the execution cwd is the job root for :flat, or tmp/ for :split.\nIf non-nothing, use this subdirectory as the execution cwd (created if missing).\n\nI/O mirroring\n\nio_mirror::Union{Symbol,Int,Tuple{Symbol,Int}} = :none\nControls how the temp_dir (or job root) directory structure is mirrored for I/O.\n:none (flat), :full (mirror full temp_dir), Int (first N segments), (:depth_minus, k) (first depth-k segments).\nIgnored when layout = :flat.\n\nInputs capture into job root\n\nlink_tim::Bool     : symlink the .tim file instead of copying (falls back to copy if symlink fails).\nsnapshot_par::Bool : copy the input .par for reproducibility.\n\nCleanup & retention\n\ncleanup_before_run::Bool   : remove engine artifacts in the run directory before launch.\nkeep_tmp_on_success::Bool  : keep tmp/ after a successful run (useful for debugging).\nkeep_tmp_on_error::Bool    : keep tmp/ if the run failed.\n\nRuntime & manifest\n\ntimeout_s::Union{Nothing,Int} : kill the run after this many seconds (nothing = unlimited).\nwrite_manifest::Bool          : write a small manifest file in the job root.\nmanifest_style::Symbol        : :json | :toml.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.LoggingOptions","page":"API","title":"GravityToolsNext.LoggingOptions","text":"LoggingOptions\n\nLightweight logging verbosity controls for the runner.\n\nverbosity — one of :silent | :warn | :info | :debug (also accepts 0..3 in the constructor)\nwith_timestamps — include timestamps in log lines\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.TempoRunSettings","page":"API","title":"GravityToolsNext.TempoRunSettings","text":"TempoRunSettings\n\nTop-level settings for a single TEMPO run. Composed from smaller structures:\n\npaths::RunPaths\nengine::EngineOptions\nmodifiers::InputModifiers\ncapture::CaptureOptions\nretention::RetentionOptions\nanalysis::WhiteNoiseOptions\nworkspace::WorkspaceOptions\nlogging::LoggingOptions\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.copy_with","page":"API","title":"GravityToolsNext.copy_with","text":"copy_with(s::TempoRunSettings; kwargs...) -> TempoRunSettings\n\nCreate a modified copy of s with keyword overrides. You can override either whole sub-structs (analysis, workspace, logging) or individual convenience keys (e.g. white_noise_enabled, timeout_s, verbosity, ...).\n\nAdditional override-params controls:\n\noverride_params_clear::Bool=false: start from an empty override list.\noverride_params_delete: names (Symbol/String or a collection of them) to remove from overrides.\noverride_params_upsert::Vector{TempoParameter}=TP[]: add/replace overrides by name.\n\nIf override_params is provided, delete/upsert are applied on top of it.\n\n\n\n\n\ncopy_with(e::PriorExecutionOptions; kwargs...) -> PriorExecutionOptions\n\nReturn a copy of e with any provided keyword overrides applied. Valid keys:\n\nmode, chain_direction, chain_snapshot_par\nscheduler, max_workers\nworkdir_layout, node_dir_prefix, keep_node_dirs\non_error\ndir_name_mode, index_pad, value_sig\n\n\n\n\n\ncopy_with(s::PriorMarginalizationSettings; kwargs...) -> PriorMarginalizationSettings\n\nCreate a modified copy of s, overriding any subset of fields via keyword arguments. All validations are performed by the regular constructor.\n\nKeyword arguments mirror the settings fields:\n\nparameter, pin_mode, prior, nodes\nlikelihood_source, ref_strategy, ref_value\nrepresentative, save_node_results\nexec_options, metrics_hook, seed_spec\n\n\n\n\n\n","category":"function"},{"location":"api/#GravityToolsNext.validate","page":"API","title":"GravityToolsNext.validate","text":"validate(v::AbstractTempoVersion) -> Bool\n\nCheck that data directory exists and the executable is available (or at least named). Returns true if OK, otherwise throws.\n\n\n\n\n\nvalidate(s::TempoRunSettings) -> Bool\n\nAlias for [validate_inputs_exist] — quick pre-materialization check that input .par/.tim exist relative to work_dir and that par_output is a bare file name. Does not create directories.\n\n\n\n\n\n","category":"function"},{"location":"api/#Runner-and-Tasks","page":"API","title":"Runner & Tasks","text":"","category":"section"},{"location":"api/#GravityToolsNext.run_tempo_parsed","page":"API","title":"GravityToolsNext.run_tempo_parsed","text":"run_tempo_parsed(settings::TempoRunSettings) :: TempoRunOutput\n\nMaterialize the workspace, run TEMPO/TEMPO2 with relative paths, parse stdout into iteration records, and assemble RunArtifacts. No post-run deletion is performed here; call cleanup_run! from task-level code after reading the artifacts.\n\n\n\n\n\n","category":"function"},{"location":"api/#GravityToolsNext.BasicTempoTask","page":"API","title":"GravityToolsNext.BasicTempoTask","text":"BasicTempoTask(settings::TempoRunSettings)\n\nSingle TEMPO/TEMPO2 task with parsed iterations, optional residual statistics, and optional white-noise analysis controlled by settings.analysis.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.run_task","page":"API","title":"GravityToolsNext.run_task","text":"run_task(task::SingleTempoTask) -> GeneralTempoResult\n\nExecute the task and return a unified result. Every concrete SingleTempoTask must provide a method.\n\n\n\n\n\nrun_task(task::MultiPointTask)\n\nEntry point for multi-point workflows. Define as needed for your project.\n\n\n\n\n\nrun_task(task::BasicTempoTask) -> GeneralTempoResult\n\nRun TEMPO/TEMPO2 using task.settings, parse iteration-wise outputs, attach residual/TIM-derived statistics, optionally perform white-noise fitting, and return an aggregated GeneralTempoResult.\n\n\n\n\n\nrun_task(task::PriorMarginalizedTempoTask) -> GeneralTempoResult\n\nExecute the prior-marginalized task: build θ grid, run/supply node results, and assemble the aggregated GeneralTempoResult.\n\nIf settings.exec_options.on_error == :stop, the execution stops at the first failing node (detected by _check_nodes_for_error) and returns that node's GeneralTempoResult annotated by _bad_prior_result with :prior_mode => :stopped_on_error.\n\n\n\n\n\n","category":"function"},{"location":"api/#GravityToolsNext.task_stage_inputs!","page":"API","title":"GravityToolsNext.task_stage_inputs!","text":"task_stage_inputs!(task::SingleTempoTask, dest_dir::AbstractString) -> Nothing\n\nStage/copy any task-specific input artifacts into dest_dir so that the task can run there using name-only paths. Default implementation does nothing.\n\nWrappers like prior-marginalization should call this before cloning a task with a new work_dir.\n\n\n\n\n\n","category":"function"},{"location":"api/#Adaptive-Grid","page":"API","title":"Adaptive Grid","text":"","category":"section"},{"location":"api/#GravityToolsNext.GridAxis","page":"API","title":"GravityToolsNext.GridAxis","text":"GridAxis(name; min, max, N, rule)\nGridAxis(name, values::AbstractVector)\n\nA typed grid axis with a chosen discretization rule. Call axisvalues to obtain physical coordinates and linspace to obtain the rule's linear parameterization.\n\nArguments\n\nname::Symbol : semantic axis name (e.g. :PBDOT, :beta0).\nmin, max     : axis bounds (ignored for ExplicitRule).\nN::Integer   : number of grid points (must be ≥ 1).\nrule         : one of LinRule(), LogRule([sign]), or ExplicitRule.\nvalues       : alternative constructor; makes an ExplicitRule from a supplied vector of nodes.\n\nExamples\n\nax1 = GridAxis(:x; min=-1.0, max=1.0, N=21, rule=LinRule())\nax2 = GridAxis(:m; min=-1e-4, max=-1e-2, N=16, rule=LogRule())  # auto-sign (−)\nax3 = GridAxis(:θ, [-1.0, -0.5, 0.0, 0.5, 1.0])                 # explicit nodes\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.LinAxis","page":"API","title":"GravityToolsNext.LinAxis","text":"GridAxis(name; min, max, N, rule)\nGridAxis(name, values::AbstractVector)\n\nA typed grid axis with a chosen discretization rule. Call axisvalues to obtain physical coordinates and linspace to obtain the rule's linear parameterization.\n\nArguments\n\nname::Symbol : semantic axis name (e.g. :PBDOT, :beta0).\nmin, max     : axis bounds (ignored for ExplicitRule).\nN::Integer   : number of grid points (must be ≥ 1).\nrule         : one of LinRule(), LogRule([sign]), or ExplicitRule.\nvalues       : alternative constructor; makes an ExplicitRule from a supplied vector of nodes.\n\nExamples\n\nax1 = GridAxis(:x; min=-1.0, max=1.0, N=21, rule=LinRule())\nax2 = GridAxis(:m; min=-1e-4, max=-1e-2, N=16, rule=LogRule())  # auto-sign (−)\nax3 = GridAxis(:θ, [-1.0, -0.5, 0.0, 0.5, 1.0])                 # explicit nodes\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.LogAxis","page":"API","title":"GravityToolsNext.LogAxis","text":"GridAxis(name; min, max, N, rule)\nGridAxis(name, values::AbstractVector)\n\nA typed grid axis with a chosen discretization rule. Call axisvalues to obtain physical coordinates and linspace to obtain the rule's linear parameterization.\n\nArguments\n\nname::Symbol : semantic axis name (e.g. :PBDOT, :beta0).\nmin, max     : axis bounds (ignored for ExplicitRule).\nN::Integer   : number of grid points (must be ≥ 1).\nrule         : one of LinRule(), LogRule([sign]), or ExplicitRule.\nvalues       : alternative constructor; makes an ExplicitRule from a supplied vector of nodes.\n\nExamples\n\nax1 = GridAxis(:x; min=-1.0, max=1.0, N=21, rule=LinRule())\nax2 = GridAxis(:m; min=-1e-4, max=-1e-2, N=16, rule=LogRule())  # auto-sign (−)\nax3 = GridAxis(:θ, [-1.0, -0.5, 0.0, 0.5, 1.0])                 # explicit nodes\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.ExplicitAxis","page":"API","title":"GravityToolsNext.ExplicitAxis","text":"GridAxis(name; min, max, N, rule)\nGridAxis(name, values::AbstractVector)\n\nA typed grid axis with a chosen discretization rule. Call axisvalues to obtain physical coordinates and linspace to obtain the rule's linear parameterization.\n\nArguments\n\nname::Symbol : semantic axis name (e.g. :PBDOT, :beta0).\nmin, max     : axis bounds (ignored for ExplicitRule).\nN::Integer   : number of grid points (must be ≥ 1).\nrule         : one of LinRule(), LogRule([sign]), or ExplicitRule.\nvalues       : alternative constructor; makes an ExplicitRule from a supplied vector of nodes.\n\nExamples\n\nax1 = GridAxis(:x; min=-1.0, max=1.0, N=21, rule=LinRule())\nax2 = GridAxis(:m; min=-1e-4, max=-1e-2, N=16, rule=LogRule())  # auto-sign (−)\nax3 = GridAxis(:θ, [-1.0, -0.5, 0.0, 0.5, 1.0])                 # explicit nodes\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.linspace","page":"API","title":"GravityToolsNext.linspace","text":"linspace(ax)\n\nReturn the linear parameterization for an axis:\n\nFor LinAxis, this equals the physical coordinates.\nFor LogAxis, this is uniform in log10(|x|).\nFor ExplicitAxis, returns a copy of the stored values.\n\nThe result is a copy (safe to mutate by the caller).\n\n\n\n\n\n","category":"function"},{"location":"api/#GravityToolsNext.axisvalues","page":"API","title":"GravityToolsNext.axisvalues","text":"axisvalues(ax)\n\nReturn the physical coordinates for an axis. For LogAxis, uses the rule sign (+1/−1) or infers it from ax.min when the rule is constructed with LogRule().\n\nThe result is a copy (safe to mutate by the caller).\n\n\n\n\n\n","category":"function"},{"location":"api/#GravityToolsNext.RefinementSettings","page":"API","title":"GravityToolsNext.RefinementSettings","text":"RefinementSettings(units...; desired_refinement_level, parallel=false, params_to_save=())\n\nContainer for adaptive‑grid refinement configuration.\n\nArguments\n\nunits...                 : one or more refinement units (order matters).\ndesired_refinement_level : how many refinement rounds to perform (≥ 0).\nparallel                 : whether the grid engine may run points in parallel.\nparams_to_save           : tuple of metric names to extract at each point.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.LocalMinimaUnit","page":"API","title":"GravityToolsNext.LocalMinimaUnit","text":"LocalMinimaUnit(name; min=-Inf, max=Inf, from_min=true)\n\nRefine until a local minimum is detected along variable name within the interval [min, max].\n\nArguments\n\nname::Symbol : the variable/axis identifier.\nmin, max   : bounds of the search interval.\nfrom_min     : if true, sweep from the lower bound (otherwise from upper).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.FullUnit","page":"API","title":"GravityToolsNext.FullUnit","text":"FullUnit(name; min=-Inf, max=Inf)\n\nAlways refine over the whole range [min, max] of variable name.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.DiffUnit","page":"API","title":"GravityToolsNext.DiffUnit","text":"DiffUnit(name; min=-Inf, max=Inf, diff, from_min=true)\n\nRefine where the absolute change Δ(metric) exceeds diff within [min, max]. If from_min is true, scanning proceeds from the lower bound.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.RelDiffUnit","page":"API","title":"GravityToolsNext.RelDiffUnit","text":"RelDiffUnit(name; min=-Inf, max=Inf, rel_diff, from_min=true)\n\nRefine where the relative change exceeds rel_diff within [min, max].\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.ContourUnit","page":"API","title":"GravityToolsNext.ContourUnit","text":"ContourUnit(name; min=-Inf, max=Inf, contours, from_min=true)\n\nRefine near specified contour levels (contours) of the target metric within [min, max]. contours can be a number, a tuple, or a vector of levels.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.DiffContourUnit","page":"API","title":"GravityToolsNext.DiffContourUnit","text":"DiffContourUnit(name; min=-Inf, max=Inf, diffs, contours, from_min=true)\n\nRefine near combinations of absolute difference thresholds (diffs) and contour levels (contours) within [min, max]. diffs/contours accept a number, tuple, or vector.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.AdaptiveRefinement2DGrid","page":"API","title":"GravityToolsNext.AdaptiveRefinement2DGrid","text":"AdaptiveRefinement2DGrid\n\nStructure representing a 2D adaptive refinement grid with variables, parameters, axes, refinement settings, and refinement status.\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.GridWorkspaceOptions","page":"API","title":"GravityToolsNext.GridWorkspaceOptions","text":"GridWorkspaceOptions\n\nWorkspace and tagging options for Adaptive2DGridTask.\n\nFields\n\ngrid_root::String            : Root folder for all grid artifacts. If relative, it's resolved against the base task work_dir.\npoint_job_prefix::String     : Subdirectory under grid_root to hold per-point job folders (used as part of job_name).\nresults_dirname::String      : Subdirectory under grid_root where per-point results (e.g., JLD2 files) are saved.\ninput_dirname::String        : Optional subdirectory name used when staging base inputs for the grid.\n\nTagging\n\ntag_mode::Symbol             : :with_value to embed axis values into the tag, :hash to use a stable hash instead.\ntag_value_sig::Int           : Significant digits when formatting values for :with_value tags.\ntag_sep::String              : Separator between X and Y parts for :with_value tags.\nsanitize::Bool               : Make tag filesystem-safe.\nhash_len::Int                : Number of hex characters to keep when tag_mode == :hash.\n\nPersistence & staging\n\nsave_results_jld2::Bool      : Save full GeneralTempoResult for each point into results_dirname.\nstage_inputs::Bool           : Stage base task inputs into the grid root once before running.\nstage_inputs_mode::Symbol    : Where to stage inputs: :root (into grid_root) or :subdir (into grid_root/input_dirname).\n\n\n\n\n\n","category":"type"},{"location":"api/#GravityToolsNext.Adaptive2DGridTask","page":"API","title":"GravityToolsNext.Adaptive2DGridTask","text":"Adaptive2DGridTask(; base_task, x, y, ref_settings, opts=GridWorkspaceOptions())\n\nRun a SingleTempoTask over an adaptively refined 2D grid defined by axes x and y.\n\nArguments\n\nbase_task::SingleTempoTask             : The task to clone and execute at each grid point.\nx::GridAxis, y::GridAxis             : Grid axes (linear/log/explicit rules supported).\nref_settings::RefinementSettings       : Refinement engine configuration (units and parameters to save).\nopts::GridWorkspaceOptions             : Workspace layout, tagging, and persistence options.\n\nBehavior\n\nEach grid point is run in its own job directory (under opts.grid_root) with a unique job_name and par_output stem.\nThe task is cloned via task_copy_with and parameter overrides TP(string(x.name), xv), TP(string(y.name), yv).\nSelected result scalars are returned to the grid engine as a NamedTuple keyed by ref_settings.params_to_save.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"grid_axes/#Grid-Axes","page":"Grid Axes","title":"Grid Axes","text":"","category":"section"},{"location":"grid_axes/","page":"Grid Axes","title":"Grid Axes","text":"Define parameter axes using grid rules.","category":"page"},{"location":"grid_axes/#Types","page":"Grid Axes","title":"Types","text":"","category":"section"},{"location":"grid_axes/","page":"Grid Axes","title":"Grid Axes","text":"LinAxis(name::Symbol, min, max, n) — linear spacing\nLogAxis(name::Symbol, min, max, n) — logarithmic spacing\nExplicitAxis(name::Symbol, values::AbstractVector) — explicit points","category":"page"},{"location":"grid_axes/","page":"Grid Axes","title":"Grid Axes","text":"Underlying rules: LinRule, LogRule, ExplicitRule with helper functions like linspace, axisvalues, and refine.","category":"page"},{"location":"grid_axes/#Examples","page":"Grid Axes","title":"Examples","text":"","category":"section"},{"location":"grid_axes/","page":"Grid Axes","title":"Grid Axes","text":"x = LinAxis(:PX, 0.0, 5.0, 51)\ny = LogAxis(:PY, 1e-4, 1e0, 41)\nz = ExplicitAxis(:PZ, [0.1, 1.0, 10.0])\n\nxs = axisvalues(x)\nys = axisvalues(y)","category":"page"},{"location":"tempo_overview/#Tempo-Framework-—-Overview","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"","category":"section"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"The Tempo Framework orchestrates TEMPO/TEMPO2 runs in a predictable, reproducible way. It is built from small, typed settings that describe paths, engine options, input modifications, what to capture/keep, runtime workspace layout, and logging.","category":"page"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"Core ideas:","category":"page"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"You configure a run using TempoRunSettings (composed of RunPaths, EngineOptions, InputModifiers, CaptureOptions, RetentionOptions, WhiteNoiseOptions, WorkspaceOptions, LoggingOptions).\nFiles are materialized into a job workspace before execution, according to WorkspaceOptions.\nThe engine runs with consistent flags and working directory selection.\nOutputs are parsed into structured Julia results.","category":"page"},{"location":"tempo_overview/#Data-flow-(typical)","page":"Tempo Framework — Overview","title":"Data flow (typical)","text":"","category":"section"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"Build TempoRunSettings (or copy/modify with copy_with).\nOptionally validate(settings) to check inputs and par_output filename.\nClean old artifacts in the job area (optional, cleanup_before_run=true).\nMaterialize a job workspace (flat or split layout).\nExecute TEMPO/TEMPO2 with derived flags (capture residuals if requested).\nParse engine outputs into result types.\nOptionally save artifacts/manifest and clean temporary files per policy.","category":"page"},{"location":"tempo_overview/#Paths-and-layout","page":"Tempo Framework — Overview","title":"Paths and layout","text":"","category":"section"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"par_input and tim_input are file names relative to work_dir.\npar_output is a filename-only token; the runner writes it under:\njob_root/<par_output> for layout=:flat\njob_root/output/<par_output> for layout=:split","category":"page"},{"location":"tempo_overview/#WorkspaceOptions-(highlights)","page":"Tempo Framework — Overview","title":"WorkspaceOptions (highlights)","text":"","category":"section"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"work_mode = :inplace | :jobdir and job_name control where the job root lives.\nlayout = :flat | :split and optional temp_dir control on-disk structure and execution cwd.\nlink_tim, snapshot_par control how inputs are staged into the job root.\ncleanup_before_run, keep_tmp_on_success, keep_tmp_on_error control cleanup behavior.\nwrite_manifest adds a small record of what was executed.\nOptional I/O mirroring controls (e.g., io_mirror = :none | :full | (:depth_minus, N) if enabled in your build) can mirror job directories or outputs up the directory tree.","category":"page"},{"location":"tempo_overview/#Results-(high-level)","page":"Tempo Framework — Overview","title":"Results (high level)","text":"","category":"section"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"Parsing builds structured results that can include:","category":"page"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"Basic fit/engine outputs and internal iterations\nResidual statistics\nOptional white noise diagnostics (if enabled)","category":"page"},{"location":"tempo_overview/","page":"Tempo Framework — Overview","title":"Tempo Framework — Overview","text":"See the dedicated Results page for details.","category":"page"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"This guide shows how to run a simple TEMPO/TEMPO2 job with GravityToolsNext.jl.","category":"page"},{"location":"quickstart/#Installation","page":"Quickstart","title":"Installation","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using Pkg\nPkg.add(url = \"https://github.com/AlexBatrakov/GravityToolsNext.jl\")","category":"page"},{"location":"quickstart/#Minimal-run","page":"Quickstart","title":"Minimal run","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using GravityToolsNext\n\ns = TempoRunSettings(\n    work_dir   = \"/path/to/workdir\",           # absolute path\n    par_input  = \"example.par\",                # relative to work_dir, must end with .par\n    tim_input  = \"example.tim\",                # relative to work_dir, must end with .tim\n    par_output = \"example_out.par\",            # filename only\n    tempo_version = Tempo2(),                   # or Tempo()\n)\n\n# Validate inputs (optional)\nvalidate(s)\n\n# Execute and parse\n# result = run_tempo_parsed(s)\n# show(result)","category":"page"},{"location":"quickstart/#Next-steps","page":"Quickstart","title":"Next steps","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"See Settings for all options.\nSee Runner for materialization and job layouts.\nSee Tasks for higher-level orchestration.","category":"page"},{"location":"tempo_tasks_basic/#BasicTempoTask-—-Single-run","page":"BasicTempoTask — Single run","title":"BasicTempoTask — Single run","text":"","category":"section"},{"location":"tempo_tasks_basic/","page":"BasicTempoTask — Single run","title":"BasicTempoTask — Single run","text":"The simplest way to execute a TEMPO run is via BasicTempoTask, which wraps a TempoRunSettings.","category":"page"},{"location":"tempo_tasks_basic/#Minimal-example","page":"BasicTempoTask — Single run","title":"Minimal example","text":"","category":"section"},{"location":"tempo_tasks_basic/","page":"BasicTempoTask — Single run","title":"BasicTempoTask — Single run","text":"using GravityToolsNext\n\ns = TempoRunSettings(\n  work_dir=\"/abs/work\", par_input=\"a.par\", tim_input=\"a.tim\", par_output=\"a_out.par\", tempo_version=Tempo2(),\n  write_output=true, write_residuals=true,\n  work_mode=:jobdir, layout=:split\n)\n\nbasic = BasicTempoTask(s)\nres = run_task(basic)","category":"page"},{"location":"tempo_tasks_basic/#Staging-inputs","page":"BasicTempoTask — Single run","title":"Staging inputs","text":"","category":"section"},{"location":"tempo_tasks_basic/","page":"BasicTempoTask — Single run","title":"BasicTempoTask — Single run","text":"You can stage .par/.tim into a directory (e.g., for batch workflows):","category":"page"},{"location":"tempo_tasks_basic/","page":"BasicTempoTask — Single run","title":"BasicTempoTask — Single run","text":"mkpath(\"/abs/work/staging\")\ntask_stage_inputs!(basic, \"/abs/work/staging\")","category":"page"},{"location":"tempo_tasks_basic/#Overrides","page":"BasicTempoTask — Single run","title":"Overrides","text":"","category":"section"},{"location":"tempo_tasks_basic/","page":"BasicTempoTask — Single run","title":"BasicTempoTask — Single run","text":"Use copy_with to derive settings for a variant run:","category":"page"},{"location":"tempo_tasks_basic/","page":"BasicTempoTask — Single run","title":"BasicTempoTask — Single run","text":"s2 = copy_with(s; par_output=\"variant_out.par\", override_params_upsert=[TP(\"DDOT\", 5e-19)])\nbasic2 = BasicTempoTask(s2)\nres2 = run_task(basic2)","category":"page"},{"location":"#GravityToolsNext.jl","page":"Home","title":"GravityToolsNext.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for GravityToolsNext.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This site is built with Documenter.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url = \"https://github.com/AlexBatrakov/GravityToolsNext.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Start-here","page":"Home","title":"Start here","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Quickstart: a minimal run with TEMPO/TEMPO2\nSettings: full list of configuration types and options\nRunner: how materialization and job layouts work\nTasks: higher-level orchestration helpers","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the API reference page for docstrings and symbols.","category":"page"}]
}
